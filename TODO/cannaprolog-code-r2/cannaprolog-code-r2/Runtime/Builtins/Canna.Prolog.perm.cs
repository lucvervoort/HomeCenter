//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Canna.Prolog.Runtime.Builtins
{
    using Canna.Prolog.Runtime.Objects;
    using Canna.Prolog.Runtime.Builtins;
    using System.Collections.Generic;
    using System.Diagnostics;
    
    
    #region Predicate combine/4
    public class combine_4 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public combine_4(Term arg1, Term arg2, Term arg3, Term arg4, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
            _arg3 = arg3.dereference();
            _arg4 = arg4.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new combine_4_1(_arg1,_arg2,_arg3,_arg4,null);
yield return new combine_4_2(_arg1,_arg2,_arg3,_arg4,null);
        }
        
        #region Clause combine([X1|X],[Y1|Y],[S1|S],[D1|D]) :- (S1 is (X1 + Y1)), (D1 is (X1 - Y1)), combine(X,Y,S,D).
        public class combine_4_1 : combine_4 {
            
            public combine_4_1(Term arg1, Term arg2, Term arg3, Term arg4, IPredicate continuation) : 
                    base(arg1, arg2, arg3, arg4, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: combine([X1|X],[Y1|Y],[S1|S],[D1|D]) :- (S1 is (X1 + Y1)), (D1 is" +
                        " (X1 - Y1)), combine(X,Y,S,D).");
                Canna.Prolog.Runtime.Objects.Var varX1 = new Canna.Prolog.Runtime.Objects.Var("X1");
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varX1, varX);
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varY1 = new Canna.Prolog.Runtime.Objects.Var("Y1");
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var("Y");
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varY1, varY);
                if ((this._arg2.unifyFunctor(_arg2Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varS1 = new Canna.Prolog.Runtime.Objects.Var("S1");
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var("S");
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varS1, varS);
                if ((this._arg3.unifyFunctor(_arg3Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varD1 = new Canna.Prolog.Runtime.Objects.Var("D1");
                Canna.Prolog.Runtime.Objects.Var varD = new Canna.Prolog.Runtime.Objects.Var("D");
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList(varD1, varD);
                if ((this._arg4.unifyFunctor(_arg4Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var S1
                // Don't need to declare var X1
                // Don't need to declare var Y1
                // Don't need to declare var D1
                // Don't need to declare var X1
                // Don't need to declare var Y1
                // Don't need to declare var X
                // Don't need to declare var Y
                // Don't need to declare var S
                // Don't need to declare var D
                this.continuation = new Canna.Prolog.Runtime.Builtins.is_2(varS1, new Canna.Prolog.Runtime.Objects.Functor("+", varX1, varY1), new Canna.Prolog.Runtime.Builtins.is_2(varD1, new Canna.Prolog.Runtime.Objects.Functor("-", varX1, varY1), new combine_4(varX, varY, varS, varD, this.continuation)));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
        
        #region Clause combine([],[],[],[]).
        public class combine_4_2 : combine_4 {
            
            public combine_4_2(Term arg1, Term arg2, Term arg3, Term arg4, IPredicate continuation) : 
                    base(arg1, arg2, arg3, arg4, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: combine([],[],[],[]).");
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((this._arg2.unifyFunctor(_arg2Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((this._arg3.unifyFunctor(_arg3Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((this._arg4.unifyFunctor(_arg4Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate perm/2
    public class perm_2 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public perm_2(Term arg1, Term arg2, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new perm_2_1(_arg1,_arg2,null);
yield return new perm_2_2(_arg1,_arg2,null);
        }
        
        #region Clause perm([H|T],L) :- perm(T,T2), takeout(H,L,T2).
        public class perm_2_1 : perm_2 {
            
            public perm_2_1(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: perm([H|T],L) :- perm(T,T2), takeout(H,L,T2).");
                Canna.Prolog.Runtime.Objects.Var varH = new Canna.Prolog.Runtime.Objects.Var("H");
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var("T");
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varH, varT);
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg2 unify with variable L
                Canna.Prolog.Runtime.Objects.Var varL = new Canna.Prolog.Runtime.Objects.Var("L");
                if ((this._arg2.unifyVar(varL, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var T
                Canna.Prolog.Runtime.Objects.Var varT2 = new Canna.Prolog.Runtime.Objects.Var("T2");
                // Don't need to declare var H
                // Don't need to declare var L
                // Don't need to declare var T2
                this.continuation = new perm_2(varT, varT2, new takeout_3(varH, varL, varT2, this.continuation));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
        
        #region Clause perm([],[]).
        public class perm_2_2 : perm_2 {
            
            public perm_2_2(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: perm([],[]).");
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((this._arg2.unifyFunctor(_arg2Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate takeout/3
    public class takeout_3 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public takeout_3(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
            _arg3 = arg3.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new takeout_3_1(_arg1,_arg2,_arg3,null);
yield return new takeout_3_2(_arg1,_arg2,_arg3,null);
        }
        
        #region Clause takeout(X,[X|T],T).
        public class takeout_3_1 : takeout_3 {
            
            public takeout_3_1(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                    base(arg1, arg2, arg3, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: takeout(X,[X|T],T).");
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                if ((this._arg1.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var("T");
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, varT);
                if ((this._arg2.unifyFunctor(_arg2Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg3 unify with variable T
                // Don't need to declare var T
                if ((this._arg3.unifyVar(varT, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
        
        #region Clause takeout(X,[H|T],[H|T2]) :- takeout(X,T,T2).
        public class takeout_3_2 : takeout_3 {
            
            public takeout_3_2(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                    base(arg1, arg2, arg3, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: takeout(X,[H|T],[H|T2]) :- takeout(X,T,T2).");
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                if ((this._arg1.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varH = new Canna.Prolog.Runtime.Objects.Var("H");
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var("T");
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varH, varT);
                if ((this._arg2.unifyFunctor(_arg2Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var H
                Canna.Prolog.Runtime.Objects.Var varT2 = new Canna.Prolog.Runtime.Objects.Var("T2");
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varH, varT2);
                if ((this._arg3.unifyFunctor(_arg3Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var T
                // Don't need to declare var T2
                this.continuation = new takeout_3(varX, varT, varT2, this.continuation);
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate member/2
    public class member_2 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public member_2(Term arg1, Term arg2, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new member_2_1(_arg1,_arg2,null);
yield return new member_2_2(_arg1,_arg2,null);
        }
        
        #region Clause member(X,[X|_]).
        public class member_2_1 : member_2 {
            
            public member_2_1(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: member(X,[X|_]).");
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                if ((this._arg1.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.Var("var1"));
                if ((this._arg2.unifyFunctor(_arg2Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
        
        #region Clause member(X,[_|T]) :- member(X,T).
        public class member_2_2 : member_2 {
            
            public member_2_2(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: member(X,[_|T]) :- member(X,T).");
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                if ((this._arg1.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var("T");
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Var("var1"), varT);
                if ((this._arg2.unifyFunctor(_arg2Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var T
                this.continuation = new member_2(varX, varT, this.continuation);
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate all/diff/1
    public class all_diff_1 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        public all_diff_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new all_diff_1_1(_arg1,null);
yield return new all_diff_1_2(_arg1,null);
        }
        
        #region Clause all_diff([X|Y]) :- ( member(X,Y) \+), all_diff(Y).
        public class all_diff_1_1 : all_diff_1 {
            
            public all_diff_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: all_diff([X|Y]) :- ( member(X,Y) \\+), all_diff(Y).");
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var("Y");
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, varY);
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var Y
                // Don't need to declare var Y
                this.continuation = new Canna.Prolog.Runtime.Builtins.not_1(new Canna.Prolog.Runtime.Objects.Functor("member", varX, varY), new all_diff_1(varY, this.continuation));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
        
        #region Clause all_diff([X]).
        public class all_diff_1_2 : all_diff_1 {
            
            public all_diff_1_2(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: all_diff([X]).");
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.PrologList());
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate solve/1
    public class solve_1 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        public solve_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new solve_1_1(_arg1,null);
        }
        
        #region Clause solve(P) :- perm([1,2,3,4],P), combine([1,2,3,4],P,S,D), all_diff(S), all_diff(D).
        public class solve_1_1 : solve_1 {
            
            public solve_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: solve(P) :- perm([1,2,3,4],P), combine([1,2,3,4],P,S,D), all_diff" +
                        "(S), all_diff(D).");
                // Test if _arg1 unify with variable P
                Canna.Prolog.Runtime.Objects.Var varP = new Canna.Prolog.Runtime.Objects.Var("P");
                if ((this._arg1.unifyVar(varP, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var P
                // Don't need to declare var P
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var("S");
                Canna.Prolog.Runtime.Objects.Var varD = new Canna.Prolog.Runtime.Objects.Var("D");
                // Don't need to declare var S
                // Don't need to declare var D
                this.continuation = new perm_2(new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(1), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(2), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(3), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(4), new Canna.Prolog.Runtime.Objects.PrologList())))), varP, new combine_4(new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(1), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(2), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(3), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(4), new Canna.Prolog.Runtime.Objects.PrologList())))), varP, varS, varD, new all_diff_1(varS, new all_diff_1(varD, this.continuation))));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate solven/2
    public class solven_2 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public solven_2(Term arg1, Term arg2, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new solven_2_1(_arg1,_arg2,null);
        }
        
        #region Clause solven(N,P) :- range(1,N,IA), perm(IA,P), combine(IA,P,S,D), all_diff(S), all_diff(D).
        public class solven_2_1 : solven_2 {
            
            public solven_2_1(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: solven(N,P) :- range(1,N,IA), perm(IA,P), combine(IA,P,S,D), all_" +
                        "diff(S), all_diff(D).");
                // Test if _arg1 unify with variable N
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var("N");
                if ((this._arg1.unifyVar(varN, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg2 unify with variable P
                Canna.Prolog.Runtime.Objects.Var varP = new Canna.Prolog.Runtime.Objects.Var("P");
                if ((this._arg2.unifyVar(varP, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var N
                Canna.Prolog.Runtime.Objects.Var varIA = new Canna.Prolog.Runtime.Objects.Var("IA");
                // Don't need to declare var IA
                // Don't need to declare var P
                // Don't need to declare var IA
                // Don't need to declare var P
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var("S");
                Canna.Prolog.Runtime.Objects.Var varD = new Canna.Prolog.Runtime.Objects.Var("D");
                // Don't need to declare var S
                // Don't need to declare var D
                this.continuation = new range_3(new Canna.Prolog.Runtime.Objects.Integer(1), varN, varIA, new perm_2(varIA, varP, new combine_4(varIA, varP, varS, varD, new all_diff_1(varS, new all_diff_1(varD, this.continuation)))));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate range/3
    public class range_3 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public range_3(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
            _arg3 = arg3.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new range_3_1(_arg1,_arg2,_arg3,null);
yield return new range_3_2(_arg1,_arg2,_arg3,null);
        }
        
        #region Clause range(X,X,[X]) :- !.
        public class range_3_1 : range_3 {
            
            public range_3_1(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                    base(arg1, arg2, arg3, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: range(X,X,[X]) :- !.");
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                if ((this._arg1.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg2 unify with variable X
                // Don't need to declare var X
                if ((this._arg2.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.PrologList());
                if ((this._arg3.unifyFunctor(_arg3Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.continuation = new Canna.Prolog.Runtime.Builtins.cut_0(this.continuation);
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
        
        #region Clause range(I,F,[I|T]) :- (I2 is (I + 1)), range(I2,F,T).
        public class range_3_2 : range_3 {
            
            public range_3_2(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                    base(arg1, arg2, arg3, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: range(I,F,[I|T]) :- (I2 is (I + 1)), range(I2,F,T).");
                // Test if _arg1 unify with variable I
                Canna.Prolog.Runtime.Objects.Var varI = new Canna.Prolog.Runtime.Objects.Var("I");
                if ((this._arg1.unifyVar(varI, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg2 unify with variable F
                Canna.Prolog.Runtime.Objects.Var varF = new Canna.Prolog.Runtime.Objects.Var("F");
                if ((this._arg2.unifyVar(varF, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var I
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var("T");
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varI, varT);
                if ((this._arg3.unifyFunctor(_arg3Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varI2 = new Canna.Prolog.Runtime.Objects.Var("I2");
                // Don't need to declare var I
                // Don't need to declare var I2
                // Don't need to declare var F
                // Don't need to declare var T
                this.continuation = new Canna.Prolog.Runtime.Builtins.is_2(varI2, new Canna.Prolog.Runtime.Objects.Functor("+", varI, new Canna.Prolog.Runtime.Objects.Integer(1)), new range_3(varI2, varF, varT, this.continuation));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate test/1
    public class test_1 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        public test_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new test_1_1(_arg1,null);
        }
        
        #region Clause test(P) :- perm([1,2,3,4],P), firstis4(P).
        public class test_1_1 : test_1 {
            
            public test_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: test(P) :- perm([1,2,3,4],P), firstis4(P).");
                // Test if _arg1 unify with variable P
                Canna.Prolog.Runtime.Objects.Var varP = new Canna.Prolog.Runtime.Objects.Var("P");
                if ((this._arg1.unifyVar(varP, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var P
                // Don't need to declare var P
                this.continuation = new perm_2(new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(1), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(2), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(3), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(4), new Canna.Prolog.Runtime.Objects.PrologList())))), varP, new firstis4_1(varP, this.continuation));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate firstis4/1
    public class firstis4_1 : Canna.Prolog.Runtime.Objects.GenericPredicate {
        
        private Term _arg1;
        
        public firstis4_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new firstis4_1_1(_arg1,null);
        }
        
        #region Clause firstis4([4|_]).
        public class firstis4_1_1 : firstis4_1 {
            
            public firstis4_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                System.Diagnostics.Trace.WriteLineIf(Canna.Prolog.Runtime.Objects.GenericPredicate._predicateSwitch.Enabled, "CALLING CLAUSE: firstis4([4|_]).");
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Integer(4), new Canna.Prolog.Runtime.Objects.Var("var1"));
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
}
