//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace init {
    using Canna.Prolog.Runtime.Objects;
    using Canna.Prolog.Runtime.Builtins;
    using System.Collections.Generic;
    using System.Diagnostics;
    
    
    #region Predicate consult/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="consult", Arity=1, IsPublic=true)]
    public class consult_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public consult_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new consult_1_1(Continuation, Engine, _arg1);
yield return new consult_1_2(Continuation, Engine, _arg1);
yield return new consult_1_3(Continuation, Engine, _arg1);
        }
        
        #region Clause consult([]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="consult", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="consult([]).")]
        private class consult_1_1 : consult_1 {
            
            public consult_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause consult([File|Rest]) :- (consult(File) , consult(Rest)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="consult", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="consult([File|Rest]) :- (consult(File) , consult(Rest)).")]
        private class consult_1_2 : consult_1 {
            
            public consult_1_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varFile = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varRest = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varFile, varRest);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var File
                // Don't need to declare var Rest
                this.Continuation = new consult_1(new consult_1(this.Continuation, this.Engine, varRest), this.Engine, varFile);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause consult(File) :- '$consult'(File).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="consult", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="consult(File) :- \'$consult\'(File).")]
        private class consult_1_3 : consult_1 {
            
            public consult_1_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable File
                Canna.Prolog.Runtime.Objects.Var varFile = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varFile, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var File
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Loading.dollarconsult_1(this.Continuation, this.Engine, varFile);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate ./2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name=".", Arity=2, IsPublic=true)]
    public class dot_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public dot_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new dot_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause [X] :- consult(X).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name=".", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="[X] :- consult(X).")]
        private class dot_2_1 : dot_2 {
            
            public dot_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                this.Continuation = new consult_1(this.Continuation, this.Engine, varX);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate ensure/loaded/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="ensure_loaded", Arity=1, IsPublic=true)]
    public class ensure_loaded_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public ensure_loaded_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new ensure_loaded_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause ensure_loaded(File) :- '$consult'(File).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="ensure_loaded", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="ensure_loaded(File) :- \'$consult\'(File).")]
        private class ensure_loaded_1_1 : ensure_loaded_1 {
            
            public ensure_loaded_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable File
                Canna.Prolog.Runtime.Objects.Var varFile = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varFile, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var File
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Loading.dollarconsult_1(this.Continuation, this.Engine, varFile);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate ^/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="^", Arity=2, IsPublic=true)]
    public class @__2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public @__2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new __2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause (Var ^ Goal) :- call(Goal).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="^", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="(Var ^ Goal) :- call(Goal).")]
        private class @__2_1 : @__2 {
            
            public @__2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Var
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varVar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Goal
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varGoal, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Goal
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varGoal);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate member/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="member", Arity=2, IsPublic=true)]
    public class member_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public member_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new member_2_1(Continuation, Engine, _arg1, _arg2);
yield return new member_2_2(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause member(X,[X|_]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="member", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="member(X,[X|_]).")]
        private class member_2_1 : member_2 {
            
            public member_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Don't need to declare var X
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.Var("var1"));
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause member(X,[_|T]) :- member(X,T).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="member", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="member(X,[_|T]) :- member(X,T).")]
        private class member_2_2 : member_2 {
            
            public member_2_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Var("var1"), varT);
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var T
                this.Continuation = new member_2(this.Continuation, this.Engine, varX, varT);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate append/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="append", Arity=3, IsPublic=true)]
    public class append_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public append_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new append_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new append_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause append([],L,L).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="append", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="append([],L,L).")]
        private class append_3_1 : append_3 {
            
            public append_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable L
                Canna.Prolog.Runtime.Objects.Var varL = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varL, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable L
                // Don't need to declare var L
                if ((_arg3_deref.UnifyWithVar(varL, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause append([H|T],L,[H|R]) :- append(T,L,R).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="append", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="append([H|T],L,[H|R]) :- append(T,L,R).")]
        private class append_3_2 : append_3 {
            
            public append_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varH = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varH, varT);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable L
                Canna.Prolog.Runtime.Objects.Var varL = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varL, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var H
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varH, varR);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var T
                // Don't need to declare var L
                // Don't need to declare var R
                this.Continuation = new append_3(this.Continuation, this.Engine, varT, varL, varR);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate select/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="select", Arity=3, IsPublic=true)]
    public class select_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public select_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new select_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new select_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause select(X,[X|Tail],Tail).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="select", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="select(X,[X|Tail],Tail).")]
        private class select_3_1 : select_3 {
            
            public select_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Don't need to declare var X
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, varTail);
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Tail
                // Don't need to declare var Tail
                if ((_arg3_deref.UnifyWithVar(varTail, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause select(Elem,[Head|Tail],[Head|Rest]) :- select(Elem,Tail,Rest).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="select", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="select(Elem,[Head|Tail],[Head|Rest]) :- select(Elem,Tail,Rest).")]
        private class select_3_2 : select_3 {
            
            public select_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Elem
                Canna.Prolog.Runtime.Objects.Var varElem = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varElem, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Var varHead = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varHead, varTail);
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Head
                Canna.Prolog.Runtime.Objects.Var varRest = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varHead, varRest);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Elem
                // Don't need to declare var Tail
                // Don't need to declare var Rest
                this.Continuation = new select_3(this.Continuation, this.Engine, varElem, varTail, varRest);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate nextto/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="nextto", Arity=3, IsPublic=true)]
    public class nextto_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public nextto_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new nextto_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new nextto_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause nextto(X,Y,[X, Y|_]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="nextto", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="nextto(X,Y,[X, Y|_]).")]
        private class nextto_3_1 : nextto_3 {
            
            public nextto_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Y
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varY, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var X
                // Don't need to declare var Y
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.PrologList(varY, new Canna.Prolog.Runtime.Objects.Var("var1")));
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause nextto(X,Y,[_|Zs]) :- nextto(X,Y,Zs).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="nextto", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="nextto(X,Y,[_|Zs]) :- nextto(X,Y,Zs).")]
        private class nextto_3_2 : nextto_3 {
            
            public nextto_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Y
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varY, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.Var varZs = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Var("var1"), varZs);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var Y
                // Don't need to declare var Zs
                this.Continuation = new nextto_3(this.Continuation, this.Engine, varX, varY, varZs);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate delete/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="delete", Arity=3, IsPublic=true)]
    public class delete_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public delete_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new delete_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new delete_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new delete_3_3(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause delete([],_,[]) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="delete", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="delete([],_,[]) :- \'!\'.")]
        private class delete_3_1 : delete_3 {
            
            public delete_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause delete([Elem|Tail],Elem,Result) :- ('!' , delete(Tail,Elem,Result)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="delete", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="delete([Elem|Tail],Elem,Result) :- (\'!\' , delete(Tail,Elem,Result)).")]
        private class delete_3_2 : delete_3 {
            
            public delete_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varElem = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varElem, varTail);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Elem
                // Don't need to declare var Elem
                if ((_arg2_deref.UnifyWithVar(varElem, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Result
                Canna.Prolog.Runtime.Objects.Var varResult = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varResult, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Tail
                // Don't need to declare var Elem
                // Don't need to declare var Result
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(new delete_3(this.Continuation, this.Engine, varTail, varElem, varResult), this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause delete([Head|Tail],Elem,[Head|Rest]) :- delete(Tail,Elem,Rest).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="delete", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="delete([Head|Tail],Elem,[Head|Rest]) :- delete(Tail,Elem,Rest).")]
        private class delete_3_3 : delete_3 {
            
            public delete_3_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varHead = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varHead, varTail);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Elem
                Canna.Prolog.Runtime.Objects.Var varElem = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varElem, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Head
                Canna.Prolog.Runtime.Objects.Var varRest = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varHead, varRest);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Tail
                // Don't need to declare var Elem
                // Don't need to declare var Rest
                this.Continuation = new delete_3(this.Continuation, this.Engine, varTail, varElem, varRest);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate quicksort/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="quicksort", Arity=2, IsPublic=false)]
    internal class quicksort_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public quicksort_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new quicksort_2_1(Continuation, Engine, _arg1, _arg2);
yield return new quicksort_2_2(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause quicksort([],[]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="quicksort", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="quicksort([],[]).")]
        private class quicksort_2_1 : quicksort_2 {
            
            public quicksort_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause quicksort([X|Tail],Sorted) :- (split(X,Tail,Small,Big) , (quicksort(Small,SortedSmall) , (quicksort(Big,SortedBig) , append(SortedSmall,[X|SortedBig],Sorted)))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="quicksort", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="quicksort([X|Tail],Sorted) :- (split(X,Tail,Small,Big) , (quicksort(Small,SortedS" +
            "mall) , (quicksort(Big,SortedBig) , append(SortedSmall,[X|SortedBig],Sorted))))." +
            "")]
        private class quicksort_2_2 : quicksort_2 {
            
            public quicksort_2_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, varTail);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Sorted
                Canna.Prolog.Runtime.Objects.Var varSorted = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varSorted, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var Tail
                Canna.Prolog.Runtime.Objects.Var varSmall = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varBig = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Small
                Canna.Prolog.Runtime.Objects.Var varSortedSmall = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Big
                Canna.Prolog.Runtime.Objects.Var varSortedBig = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var SortedSmall
                // Don't need to declare var X
                // Don't need to declare var SortedBig
                // Don't need to declare var Sorted
                this.Continuation = new split_4(new quicksort_2(new quicksort_2(new append_3(this.Continuation, this.Engine, varSortedSmall, new Canna.Prolog.Runtime.Objects.PrologList(varX, varSortedBig), varSorted), this.Engine, varBig, varSortedBig), this.Engine, varSmall, varSortedSmall), this.Engine, varX, varTail, varSmall, varBig);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate split/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="split", Arity=4, IsPublic=false)]
    internal class split_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public split_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new split_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new split_4_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new split_4_3(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause split(X,[],[],[]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="split", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="split(X,[],[],[]).")]
        private class split_4_1 : split_4 {
            
            public split_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause split(X,[Y|Tail],[Y|Small],Big) :- ((X > Y) , ('!' , split(X,Tail,Small,Big))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="split", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="split(X,[Y|Tail],[Y|Small],Big) :- ((X > Y) , (\'!\' , split(X,Tail,Small,Big))).")]
        private class split_4_2 : split_4 {
            
            public split_4_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varY, varTail);
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Y
                Canna.Prolog.Runtime.Objects.Var varSmall = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varY, varSmall);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Big
                Canna.Prolog.Runtime.Objects.Var varBig = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varBig, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var Y
                // Don't need to declare var X
                // Don't need to declare var Tail
                // Don't need to declare var Small
                // Don't need to declare var Big
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Arithmetic.GreaterThan(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new split_4(this.Continuation, this.Engine, varX, varTail, varSmall, varBig), this.Engine), this.Engine, varX, varY);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause split(X,[Y|Tail],Small,[Y|Big]) :- split(X,Tail,Small,Big).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="split", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="split(X,[Y|Tail],Small,[Y|Big]) :- split(X,Tail,Small,Big).")]
        private class split_4_3 : split_4 {
            
            public split_4_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varY, varTail);
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Small
                Canna.Prolog.Runtime.Objects.Var varSmall = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varSmall, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var Y
                Canna.Prolog.Runtime.Objects.Var varBig = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList(varY, varBig);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var Tail
                // Don't need to declare var Small
                // Don't need to declare var Big
                this.Continuation = new split_4(this.Continuation, this.Engine, varX, varTail, varSmall, varBig);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate sort/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="sort", Arity=4, IsPublic=false)]
    internal class sort_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public sort_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new sort_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new sort_4_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new sort_4_3(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause sort(_,_,[],[]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="sort", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="sort(_,_,[],[]).")]
        private class sort_4_1 : sort_4 {
            
            public sort_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable _
                // Don't need to declare var _
                if ((_arg1_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause sort(_,_,[X],[X]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="sort", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="sort(_,_,[X],[X]).")]
        private class sort_4_2 : sort_4 {
            
            public sort_4_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable _
                // Don't need to declare var _
                if ((_arg1_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.PrologList());
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var X
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.PrologList());
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause sort(Key,Order,[X, Y|L],Sorted) :- (halve(L,[Y|L],Front,Back) , (sort(Key,Order,[X|Front],F) , (sort(Key,Order,Back,B) , merge(Key,Order,F,B,Sorted)))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="sort", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="sort(Key,Order,[X, Y|L],Sorted) :- (halve(L,[Y|L],Front,Back) , (sort(Key,Order,[" +
            "X|Front],F) , (sort(Key,Order,Back,B) , merge(Key,Order,F,B,Sorted)))).")]
        private class sort_4_3 : sort_4 {
            
            public sort_4_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Key
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Order
                Canna.Prolog.Runtime.Objects.Var varOrder = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varOrder, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varL = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varX, new Canna.Prolog.Runtime.Objects.PrologList(varY, varL));
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Sorted
                Canna.Prolog.Runtime.Objects.Var varSorted = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varSorted, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var L
                // Don't need to declare var Y
                // Don't need to declare var L
                Canna.Prolog.Runtime.Objects.Var varFront = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varBack = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Key
                // Don't need to declare var Order
                // Don't need to declare var X
                // Don't need to declare var Front
                Canna.Prolog.Runtime.Objects.Var varF = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Key
                // Don't need to declare var Order
                // Don't need to declare var Back
                Canna.Prolog.Runtime.Objects.Var varB = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Key
                // Don't need to declare var Order
                // Don't need to declare var F
                // Don't need to declare var B
                // Don't need to declare var Sorted
                this.Continuation = new halve_4(new sort_4(new sort_4(new merge_5(this.Continuation, this.Engine, varKey, varOrder, varF, varB, varSorted), this.Engine, varKey, varOrder, varBack, varB), this.Engine, varKey, varOrder, new Canna.Prolog.Runtime.Objects.PrologList(varX, varFront), varF), this.Engine, varL, new Canna.Prolog.Runtime.Objects.PrologList(varY, varL), varFront, varBack);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate halve/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="halve", Arity=4, IsPublic=false)]
    internal class halve_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public halve_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new halve_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new halve_4_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause halve([_, _|Count],[H|T],[H|F],B) :- ('!' , halve(Count,T,F,B)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="halve", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="halve([_, _|Count],[H|T],[H|F],B) :- (\'!\' , halve(Count,T,F,B)).")]
        private class halve_4_1 : halve_4 {
            
            public halve_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Don't need to declare var _
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.Var varCount = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Var("var1"), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Var("var2"), varCount));
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Var varH = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg2Template = new Canna.Prolog.Runtime.Objects.PrologList(varH, varT);
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var H
                Canna.Prolog.Runtime.Objects.Var varF = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varH, varF);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable B
                Canna.Prolog.Runtime.Objects.Var varB = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varB, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Count
                // Don't need to declare var T
                // Don't need to declare var F
                // Don't need to declare var B
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(new halve_4(this.Continuation, this.Engine, varCount, varT, varF, varB), this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause halve(_,B,[],B).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="halve", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="halve(_,B,[],B).")]
        private class halve_4_2 : halve_4 {
            
            public halve_4_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable _
                // Don't need to declare var _
                if ((_arg1_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable B
                Canna.Prolog.Runtime.Objects.Var varB = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varB, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable B
                // Don't need to declare var B
                if ((_arg4_deref.UnifyWithVar(varB, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate merge/5
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="merge", Arity=5, IsPublic=false)]
    internal class merge_5 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        private Term _arg5;
        
        public merge_5(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
            _arg5 = arg5;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new merge_5_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
yield return new merge_5_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
yield return new merge_5_3(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
        }
        
        #region Clause merge(Key,Order,[H1|T1],[H2|T2],[Hm|Tm]) :- ('!' , (compare(Key,Order,H1,H2,R) , (((R = <) , ('!' , ((Hm = H1) , merge(Key,Order,T1,[H2|T2],Tm)))) ; (((R = >) , ('!' , ((Hm = H2) , merge(Key,Order,[H1|T1],T2,Tm)))) ; ((R = =) , ('!' , ((Hm = H1) , merge(Key,Order,T1,T2,Tm)))))))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="merge", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement=@"merge(Key,Order,[H1|T1],[H2|T2],[Hm|Tm]) :- ('!' , (compare(Key,Order,H1,H2,R) , (((R = <) , ('!' , ((Hm = H1) , merge(Key,Order,T1,[H2|T2],Tm)))) ; (((R = >) , ('!' , ((Hm = H2) , merge(Key,Order,[H1|T1],T2,Tm)))) ; ((R = =) , ('!' , ((Hm = H1) , merge(Key,Order,T1,T2,Tm)))))))).")]
        private class merge_5_1 : merge_5 {
            
            public merge_5_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Key
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Order
                Canna.Prolog.Runtime.Objects.Var varOrder = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varOrder, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Var varH1 = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varT1 = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varH1, varT1);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                Canna.Prolog.Runtime.Objects.Var varH2 = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varT2 = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList(varH2, varT2);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                Canna.Prolog.Runtime.Objects.Var varHm = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTm = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg5Template = new Canna.Prolog.Runtime.Objects.PrologList(varHm, varTm);
                if ((_arg5_deref.UnifyWithStructure(_arg5Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Key
                // Don't need to declare var Order
                // Don't need to declare var H1
                // Don't need to declare var H2
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var R
                // Don't need to declare var Hm
                // Don't need to declare var H1
                // Don't need to declare var Key
                // Don't need to declare var Order
                // Don't need to declare var T1
                // Don't need to declare var H2
                // Don't need to declare var T2
                // Don't need to declare var Tm
                // Don't need to declare var R
                // Don't need to declare var Hm
                // Don't need to declare var H2
                // Don't need to declare var Key
                // Don't need to declare var Order
                // Don't need to declare var H1
                // Don't need to declare var T1
                // Don't need to declare var T2
                // Don't need to declare var Tm
                // Don't need to declare var R
                // Don't need to declare var Hm
                // Don't need to declare var H1
                // Don't need to declare var Key
                // Don't need to declare var Order
                // Don't need to declare var T1
                // Don't need to declare var T2
                // Don't need to declare var Tm
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(new compare_5(new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Unification.unify_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Unification.unify_2(new merge_5(this.Continuation, this.Engine, varKey, varOrder, varT1, new Canna.Prolog.Runtime.Objects.PrologList(varH2, varT2), varTm), this.Engine, varHm, varH1), this.Engine), this.Engine, varR, new Canna.Prolog.Runtime.Objects.Structure("<")), new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Unification.unify_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Unification.unify_2(new merge_5(this.Continuation, this.Engine, varKey, varOrder, new Canna.Prolog.Runtime.Objects.PrologList(varH1, varT1), varT2, varTm), this.Engine, varHm, varH2), this.Engine), this.Engine, varR, new Canna.Prolog.Runtime.Objects.Structure(">")), new Canna.Prolog.Runtime.Builtins.Unification.unify_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Unification.unify_2(new merge_5(this.Continuation, this.Engine, varKey, varOrder, varT1, varT2, varTm), this.Engine, varHm, varH1), this.Engine), this.Engine, varR, new Canna.Prolog.Runtime.Objects.Structure("=")))), this.Engine, varKey, varOrder, varH1, varH2, varR), this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause merge(_,_,[],L,L) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="merge", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="merge(_,_,[],L,L) :- \'!\'.")]
        private class merge_5_2 : merge_5 {
            
            public merge_5_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable _
                // Don't need to declare var _
                if ((_arg1_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable L
                Canna.Prolog.Runtime.Objects.Var varL = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varL, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable L
                // Don't need to declare var L
                if ((_arg5_deref.UnifyWithVar(varL, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause merge(_,_,L,[],L).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="merge", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="merge(_,_,L,[],L).")]
        private class merge_5_3 : merge_5 {
            
            public merge_5_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable _
                // Don't need to declare var _
                if ((_arg1_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable L
                Canna.Prolog.Runtime.Objects.Var varL = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varL, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable L
                // Don't need to declare var L
                if ((_arg5_deref.UnifyWithVar(varL, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate compare/5
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=5, IsPublic=false)]
    internal class compare_5 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        private Term _arg5;
        
        public compare_5(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
            _arg5 = arg5;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new compare_5_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
        }
        
        #region Clause compare(Key,Order,X,Y,R) :- (compare(Key,X,Y,R0) , combine(Order,R0,R)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="compare(Key,Order,X,Y,R) :- (compare(Key,X,Y,R0) , combine(Order,R0,R)).")]
        private class compare_5_1 : compare_5 {
            
            public compare_5_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Key
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Order
                Canna.Prolog.Runtime.Objects.Var varOrder = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varOrder, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Y
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varY, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable R
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg5_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Key
                // Don't need to declare var X
                // Don't need to declare var Y
                Canna.Prolog.Runtime.Objects.Var varR0 = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Order
                // Don't need to declare var R0
                // Don't need to declare var R
                this.Continuation = new compare_4(new combine_3(this.Continuation, this.Engine, varOrder, varR0, varR), this.Engine, varKey, varX, varY, varR0);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate compare/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=4, IsPublic=false)]
    internal class compare_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public compare_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new compare_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new compare_4_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause compare(0,X,Y,R) :- ('!' , compare(R,X,Y)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="compare(0,X,Y,R) :- (\'!\' , compare(R,X,Y)).")]
        private class compare_4_1 : compare_4 {
            
            public compare_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with integer 0
                if ((_arg1_deref.UnifyWithInteger(new Canna.Prolog.Runtime.Objects.Integer(0), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Y
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varY, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable R
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var R
                // Don't need to declare var X
                // Don't need to declare var Y
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(new compare_3(this.Continuation, this.Engine, varR, varX, varY), this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause compare(N,X,Y,R) :- (arg(N,X,Xn) , (arg(N,Y,Yn) , compare(R,Xn,Yn))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="compare(N,X,Y,R) :- (arg(N,X,Xn) , (arg(N,Y,Yn) , compare(R,Xn,Yn))).")]
        private class compare_4_2 : compare_4 {
            
            public compare_4_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable N
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varN, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Y
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varY, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable R
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var N
                // Don't need to declare var X
                Canna.Prolog.Runtime.Objects.Var varXn = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var Y
                Canna.Prolog.Runtime.Objects.Var varYn = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var R
                // Don't need to declare var Xn
                // Don't need to declare var Yn
                this.Continuation = new Canna.Prolog.Runtime.Builtins.TermComposition.arg_3(new Canna.Prolog.Runtime.Builtins.TermComposition.arg_3(new compare_3(this.Continuation, this.Engine, varR, varXn, varYn), this.Engine, varN, varY, varYn), this.Engine, varN, varX, varXn);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate combine/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
    internal class combine_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public combine_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new combine_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new combine_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new combine_3_3(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new combine_3_4(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new combine_3_5(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new combine_3_6(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new combine_3_7(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new combine_3_8(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause combine(<,R,R).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(<,R,R).")]
        private class combine_3_1 : combine_3 {
            
            public combine_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("<");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable R
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable R
                // Don't need to declare var R
                if ((_arg3_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause combine('=<',>,>) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(\'=<\',>,>) :- \'!\'.")]
        private class combine_3_2 : combine_3 {
            
            public combine_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("=<");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg2Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause combine('=<',_,<).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(\'=<\',_,<).")]
        private class combine_3_3 : combine_3 {
            
            public combine_3_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("=<");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("<");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause combine(>=,<,>) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(>=,<,>) :- \'!\'.")]
        private class combine_3_4 : combine_3 {
            
            public combine_3_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure(">=");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg2Template = new Canna.Prolog.Runtime.Objects.Structure("<");
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause combine(>=,_,<).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(>=,_,<).")]
        private class combine_3_5 : combine_3 {
            
            public combine_3_5(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure(">=");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("<");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause combine(>,<,>) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(>,<,>) :- \'!\'.")]
        private class combine_3_6 : combine_3 {
            
            public combine_3_6(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg2Template = new Canna.Prolog.Runtime.Objects.Structure("<");
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause combine(>,>,<) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(>,>,<) :- \'!\'.")]
        private class combine_3_7 : combine_3 {
            
            public combine_3_7(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg2Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("<");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause combine(>,=,=).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="combine", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="combine(>,=,=).")]
        private class combine_3_8 : combine_3 {
            
            public combine_3_8(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg2Template = new Canna.Prolog.Runtime.Objects.Structure("=");
                if ((_arg2_deref.UnifyWithStructure(_arg2Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("=");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate keysort/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="keysort", Arity=2, IsPublic=false)]
    internal class keysort_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public keysort_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new keysort_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause keysort(R,S) :- sort(1,'=<',R,S).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="keysort", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="keysort(R,S) :- sort(1,\'=<\',R,S).")]
        private class keysort_2_1 : keysort_2 {
            
            public keysort_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable R
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable S
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varS, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var R
                // Don't need to declare var S
                this.Continuation = new sort_4(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.Integer(1), new Canna.Prolog.Runtime.Objects.Structure("=<"), varR, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate msort/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="msort", Arity=2, IsPublic=false)]
    internal class msort_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public msort_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new msort_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause msort(R,S) :- sort(0,'=<',R,S).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="msort", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="msort(R,S) :- sort(0,\'=<\',R,S).")]
        private class msort_2_1 : msort_2 {
            
            public msort_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable R
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable S
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varS, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var R
                // Don't need to declare var S
                this.Continuation = new sort_4(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.Integer(0), new Canna.Prolog.Runtime.Objects.Structure("=<"), varR, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate sort/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="sort", Arity=2, IsPublic=false)]
    internal class sort_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public sort_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new sort_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause sort(R,S) :- sort(0,<,R,S).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="sort", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="sort(R,S) :- sort(0,<,R,S).")]
        private class sort_2_1 : sort_2 {
            
            public sort_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable R
                Canna.Prolog.Runtime.Objects.Var varR = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varR, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable S
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varS, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var R
                // Don't need to declare var S
                this.Continuation = new sort_4(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.Integer(0), new Canna.Prolog.Runtime.Objects.Structure("<"), varR, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate merge/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="merge", Arity=3, IsPublic=false)]
    internal class merge_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public merge_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new merge_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause merge(A,B,M) :- merge(0,'=<',A,B,M).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="merge", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="merge(A,B,M) :- merge(0,\'=<\',A,B,M).")]
        private class merge_3_1 : merge_3 {
            
            public merge_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable A
                Canna.Prolog.Runtime.Objects.Var varA = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varA, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable B
                Canna.Prolog.Runtime.Objects.Var varB = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varB, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable M
                Canna.Prolog.Runtime.Objects.Var varM = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varM, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var A
                // Don't need to declare var B
                // Don't need to declare var M
                this.Continuation = new merge_5(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.Integer(0), new Canna.Prolog.Runtime.Objects.Structure("=<"), varA, varB, varM);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate findall/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="findall", Arity=3, IsPublic=true)]
    public class findall_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public findall_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new findall_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause findall(Template,Generator,List) :- (save_instances(( - Template),Generator) , list_instances([],List)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="findall", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="findall(Template,Generator,List) :- (save_instances(( - Template),Generator) , li" +
            "st_instances([],List)).")]
        private class findall_3_1 : findall_3 {
            
            public findall_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Template
                Canna.Prolog.Runtime.Objects.Var varTemplate = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTemplate, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Generator
                Canna.Prolog.Runtime.Objects.Var varGenerator = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varGenerator, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable List
                Canna.Prolog.Runtime.Objects.Var varList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Template
                // Don't need to declare var Generator
                // Don't need to declare var List
                this.Continuation = new save_instances_2(new list_instances_2(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.PrologList(), varList), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("-", varTemplate), varGenerator);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate findall/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="findall", Arity=4, IsPublic=false)]
    internal class findall_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public findall_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new findall_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause findall(Template,Generator,SoFar,List) :- (save_instances(( - Template),Generator) , list_instances(SoFar,List)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="findall", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="findall(Template,Generator,SoFar,List) :- (save_instances(( - Template),Generator" +
            ") , list_instances(SoFar,List)).")]
        private class findall_4_1 : findall_4 {
            
            public findall_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Template
                Canna.Prolog.Runtime.Objects.Var varTemplate = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTemplate, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Generator
                Canna.Prolog.Runtime.Objects.Var varGenerator = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varGenerator, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable SoFar
                Canna.Prolog.Runtime.Objects.Var varSoFar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varSoFar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable List
                Canna.Prolog.Runtime.Objects.Var varList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Template
                // Don't need to declare var Generator
                // Don't need to declare var SoFar
                // Don't need to declare var List
                this.Continuation = new save_instances_2(new list_instances_2(this.Continuation, this.Engine, varSoFar, varList), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("-", varTemplate), varGenerator);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate setof/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="setof", Arity=3, IsPublic=true)]
    public class setof_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public setof_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new setof_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause setof(Template,Filter,Set) :- (bagof(Template,Filter,Bag) , sort(Bag,Set)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="setof", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="setof(Template,Filter,Set) :- (bagof(Template,Filter,Bag) , sort(Bag,Set)).")]
        private class setof_3_1 : setof_3 {
            
            public setof_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Template
                Canna.Prolog.Runtime.Objects.Var varTemplate = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTemplate, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Filter
                Canna.Prolog.Runtime.Objects.Var varFilter = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varFilter, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Set
                Canna.Prolog.Runtime.Objects.Var varSet = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varSet, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Template
                // Don't need to declare var Filter
                Canna.Prolog.Runtime.Objects.Var varBag = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Bag
                // Don't need to declare var Set
                this.Continuation = new bagof_3(new sort_2(this.Continuation, this.Engine, varBag, varSet), this.Engine, varTemplate, varFilter, varBag);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate bagof/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="bagof", Arity=3, IsPublic=true)]
    public class bagof_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public bagof_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new bagof_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new bagof_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause bagof(Template,Generator,Bag) :- (free_variables(Generator,Template,[],Vars) , ((Vars \== []) , ('!' , ((Key =.. ['.'|Vars]) , (functor(Key,'.',N) , (save_instances((Key - Template),Generator) , (list_instances(Key,N,[],OmniumGatherum) , (keysort(OmniumGatherum,Gamut) , ('!' , (concordant_subset(Gamut,Key,Answer) , (Bag = Answer))))))))))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="bagof", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement=@"bagof(Template,Generator,Bag) :- (free_variables(Generator,Template,[],Vars) , ((Vars \== []) , ('!' , ((Key =.. ['.'|Vars]) , (functor(Key,'.',N) , (save_instances((Key - Template),Generator) , (list_instances(Key,N,[],OmniumGatherum) , (keysort(OmniumGatherum,Gamut) , ('!' , (concordant_subset(Gamut,Key,Answer) , (Bag = Answer))))))))))).")]
        private class bagof_3_1 : bagof_3 {
            
            public bagof_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Template
                Canna.Prolog.Runtime.Objects.Var varTemplate = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTemplate, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Generator
                Canna.Prolog.Runtime.Objects.Var varGenerator = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varGenerator, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Bag
                Canna.Prolog.Runtime.Objects.Var varBag = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Generator
                // Don't need to declare var Template
                Canna.Prolog.Runtime.Objects.Var varVars = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Vars
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Vars
                // Don't need to declare var Key
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Key
                // Don't need to declare var Template
                // Don't need to declare var Generator
                // Don't need to declare var Key
                // Don't need to declare var N
                Canna.Prolog.Runtime.Objects.Var varOmniumGatherum = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var OmniumGatherum
                Canna.Prolog.Runtime.Objects.Var varGamut = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Gamut
                // Don't need to declare var Key
                Canna.Prolog.Runtime.Objects.Var varAnswer = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Bag
                // Don't need to declare var Answer
                this.Continuation = new free_variables_4(new Canna.Prolog.Runtime.Builtins.NotIdenticalTerm(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.TermComposition.univ_2(new Canna.Prolog.Runtime.Builtins.TermComposition.functor_3(new save_instances_2(new list_instances_4(new keysort_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new concordant_subset_3(new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varBag, varAnswer), this.Engine, varGamut, varKey, varAnswer), this.Engine), this.Engine, varOmniumGatherum, varGamut), this.Engine, varKey, varN, new Canna.Prolog.Runtime.Objects.PrologList(), varOmniumGatherum), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("-", varKey, varTemplate), varGenerator), this.Engine, varKey, new Canna.Prolog.Runtime.Objects.Structure("."), varN), this.Engine, varKey, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("."), varVars)), this.Engine), this.Engine, varVars, new Canna.Prolog.Runtime.Objects.PrologList()), this.Engine, varGenerator, varTemplate, new Canna.Prolog.Runtime.Objects.PrologList(), varVars);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause bagof(Template,Generator,Bag) :- (save_instances(( - Template),Generator) , (list_instances([],Bag) , (Bag \== []))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="bagof", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="bagof(Template,Generator,Bag) :- (save_instances(( - Template),Generator) , (list" +
            "_instances([],Bag) , (Bag \\== []))).")]
        private class bagof_3_2 : bagof_3 {
            
            public bagof_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Template
                Canna.Prolog.Runtime.Objects.Var varTemplate = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTemplate, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Generator
                Canna.Prolog.Runtime.Objects.Var varGenerator = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varGenerator, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Bag
                Canna.Prolog.Runtime.Objects.Var varBag = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Template
                // Don't need to declare var Generator
                // Don't need to declare var Bag
                // Don't need to declare var Bag
                this.Continuation = new save_instances_2(new list_instances_2(new Canna.Prolog.Runtime.Builtins.NotIdenticalTerm(this.Continuation, this.Engine, varBag, new Canna.Prolog.Runtime.Objects.PrologList()), this.Engine, new Canna.Prolog.Runtime.Objects.PrologList(), varBag), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("-", varTemplate), varGenerator);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate save/instances/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="save_instances", Arity=2, IsPublic=false)]
    internal class save_instances_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public save_instances_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new save_instances_2_1(Continuation, Engine, _arg1, _arg2);
yield return new save_instances_2_2(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause save_instances(Template,Generator) :- (recorda('.',-,_) , (call(Generator) , (recorda('.',Template,_) , fail))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="save_instances", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="save_instances(Template,Generator) :- (recorda(\'.\',-,_) , (call(Generator) , (rec" +
            "orda(\'.\',Template,_) , fail))).")]
        private class save_instances_2_1 : save_instances_2 {
            
            public save_instances_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Template
                Canna.Prolog.Runtime.Objects.Var varTemplate = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTemplate, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Generator
                Canna.Prolog.Runtime.Objects.Var varGenerator = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varGenerator, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var _
                // Don't need to declare var Generator
                // Don't need to declare var Template
                // Don't need to declare var _
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Recorded.recorda_3(new Canna.Prolog.Runtime.Builtins.Control.call_1(new Canna.Prolog.Runtime.Builtins.Recorded.recorda_3(new Canna.Prolog.Runtime.Builtins.Control.fail_0(this.Continuation, this.Engine), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("."), varTemplate, new Canna.Prolog.Runtime.Objects.Var("var1")), this.Engine, varGenerator), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("."), new Canna.Prolog.Runtime.Objects.Structure("-"), new Canna.Prolog.Runtime.Objects.Var("var2"));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause save_instances(_,_).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="save_instances", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="save_instances(_,_).")]
        private class save_instances_2_2 : save_instances_2 {
            
            public save_instances_2_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable _
                // Don't need to declare var _
                if ((_arg1_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate list/instances/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=2, IsPublic=false)]
    internal class list_instances_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public list_instances_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new list_instances_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause list_instances(SoFar,Total) :- (recorded('.',Term,Ref) , (erase(Ref) , ('!' , list_instances(Term,SoFar,Total)))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_instances(SoFar,Total) :- (recorded(\'.\',Term,Ref) , (erase(Ref) , (\'!\' , lis" +
            "t_instances(Term,SoFar,Total)))).")]
        private class list_instances_2_1 : list_instances_2 {
            
            public list_instances_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable SoFar
                Canna.Prolog.Runtime.Objects.Var varSoFar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varSoFar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Total
                Canna.Prolog.Runtime.Objects.Var varTotal = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTotal, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varRef = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Ref
                // Don't need to declare var Term
                // Don't need to declare var SoFar
                // Don't need to declare var Total
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Recorded.recorded_3(new Canna.Prolog.Runtime.Builtins.Recorded.erase_1(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new list_instances_3(this.Continuation, this.Engine, varTerm, varSoFar, varTotal), this.Engine), this.Engine, varRef), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("."), varTerm, varRef);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate list/instances/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=3, IsPublic=false)]
    internal class list_instances_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public list_instances_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new list_instances_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new list_instances_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause list_instances(-,SoFar,Total) :- ('!' , (Total = SoFar)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_instances(-,SoFar,Total) :- (\'!\' , (Total = SoFar)).")]
        private class list_instances_3_1 : list_instances_3 {
            
            public list_instances_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("-");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable SoFar
                Canna.Prolog.Runtime.Objects.Var varSoFar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varSoFar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Total
                Canna.Prolog.Runtime.Objects.Var varTotal = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varTotal, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Total
                // Don't need to declare var SoFar
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varTotal, varSoFar), this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause list_instances(( - Template),SoFar,Total) :- list_instances([Template|SoFar],Total).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_instances(( - Template),SoFar,Total) :- list_instances([Template|SoFar],Tota" +
            "l).")]
        private class list_instances_3_2 : list_instances_3 {
            
            public list_instances_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varTemplate = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("-", varTemplate);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable SoFar
                Canna.Prolog.Runtime.Objects.Var varSoFar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varSoFar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Total
                Canna.Prolog.Runtime.Objects.Var varTotal = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varTotal, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Template
                // Don't need to declare var SoFar
                // Don't need to declare var Total
                this.Continuation = new list_instances_2(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.PrologList(varTemplate, varSoFar), varTotal);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate list/instances/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=4, IsPublic=false)]
    internal class list_instances_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public list_instances_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new list_instances_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause list_instances(Key,NVars,OldBag,NewBag) :- (recorded('.',Term,Ref) , (erase(Ref) , ('!' , list_instances(Term,Key,NVars,OldBag,NewBag)))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_instances(Key,NVars,OldBag,NewBag) :- (recorded(\'.\',Term,Ref) , (erase(Ref) " +
            ", (\'!\' , list_instances(Term,Key,NVars,OldBag,NewBag)))).")]
        private class list_instances_4_1 : list_instances_4 {
            
            public list_instances_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Key
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable NVars
                Canna.Prolog.Runtime.Objects.Var varNVars = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varNVars, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable OldBag
                Canna.Prolog.Runtime.Objects.Var varOldBag = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varOldBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable NewBag
                Canna.Prolog.Runtime.Objects.Var varNewBag = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varNewBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varRef = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Ref
                // Don't need to declare var Term
                // Don't need to declare var Key
                // Don't need to declare var NVars
                // Don't need to declare var OldBag
                // Don't need to declare var NewBag
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Recorded.recorded_3(new Canna.Prolog.Runtime.Builtins.Recorded.erase_1(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new list_instances_5(this.Continuation, this.Engine, varTerm, varKey, varNVars, varOldBag, varNewBag), this.Engine), this.Engine, varRef), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("."), varTerm, varRef);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate list/instances/5
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=5, IsPublic=false)]
    internal class list_instances_5 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        private Term _arg5;
        
        public list_instances_5(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
            _arg5 = arg5;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new list_instances_5_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
yield return new list_instances_5_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
        }
        
        #region Clause list_instances(-,_,_,AnsBag,AnsBag) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_instances(-,_,_,AnsBag,AnsBag) :- \'!\'.")]
        private class list_instances_5_1 : list_instances_5 {
            
            public list_instances_5_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("-");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable _
                // Don't need to declare var _
                if ((_arg3_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable AnsBag
                Canna.Prolog.Runtime.Objects.Var varAnsBag = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varAnsBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable AnsBag
                // Don't need to declare var AnsBag
                if ((_arg5_deref.UnifyWithVar(varAnsBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause list_instances((NewKey - Term),Key,NVars,OldBag,NewBag) :- (replace_key_variables(NVars,Key,NewKey) , ('!' , list_instances(Key,NVars,[(NewKey - Term)|OldBag],NewBag))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_instances", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_instances((NewKey - Term),Key,NVars,OldBag,NewBag) :- (replace_key_variables" +
            "(NVars,Key,NewKey) , (\'!\' , list_instances(Key,NVars,[(NewKey - Term)|OldBag],Ne" +
            "wBag))).")]
        private class list_instances_5_2 : list_instances_5 {
            
            public list_instances_5_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varNewKey = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("-", varNewKey, varTerm);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Key
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable NVars
                Canna.Prolog.Runtime.Objects.Var varNVars = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varNVars, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable OldBag
                Canna.Prolog.Runtime.Objects.Var varOldBag = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varOldBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable NewBag
                Canna.Prolog.Runtime.Objects.Var varNewBag = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg5_deref.UnifyWithVar(varNewBag, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var NVars
                // Don't need to declare var Key
                // Don't need to declare var NewKey
                // Don't need to declare var Key
                // Don't need to declare var NVars
                // Don't need to declare var NewKey
                // Don't need to declare var Term
                // Don't need to declare var OldBag
                // Don't need to declare var NewBag
                this.Continuation = new replace_key_variables_3(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new list_instances_4(this.Continuation, this.Engine, varKey, varNVars, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("-", varNewKey, varTerm), varOldBag), varNewBag), this.Engine), this.Engine, varNVars, varKey, varNewKey);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate replace/key/variables/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="replace_key_variables", Arity=3, IsPublic=false)]
    internal class replace_key_variables_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public replace_key_variables_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new replace_key_variables_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new replace_key_variables_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new replace_key_variables_3_3(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause replace_key_variables(0,_,_) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="replace_key_variables", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="replace_key_variables(0,_,_) :- \'!\'.")]
        private class replace_key_variables_3_1 : replace_key_variables_3 {
            
            public replace_key_variables_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with integer 0
                if ((_arg1_deref.UnifyWithInteger(new Canna.Prolog.Runtime.Objects.Integer(0), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable _
                // Don't need to declare var _
                if ((_arg3_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause replace_key_variables(N,OldKey,NewKey) :- (arg(N,NewKey,Arg) , (nonvar(Arg) , ('!' , ((M is (N - 1)) , replace_key_variables(M,OldKey,NewKey))))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="replace_key_variables", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="replace_key_variables(N,OldKey,NewKey) :- (arg(N,NewKey,Arg) , (nonvar(Arg) , (\'!" +
            "\' , ((M is (N - 1)) , replace_key_variables(M,OldKey,NewKey))))).")]
        private class replace_key_variables_3_2 : replace_key_variables_3 {
            
            public replace_key_variables_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable N
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varN, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable OldKey
                Canna.Prolog.Runtime.Objects.Var varOldKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varOldKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable NewKey
                Canna.Prolog.Runtime.Objects.Var varNewKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varNewKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var N
                // Don't need to declare var NewKey
                Canna.Prolog.Runtime.Objects.Var varArg = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Arg
                Canna.Prolog.Runtime.Objects.Var varM = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var M
                // Don't need to declare var OldKey
                // Don't need to declare var NewKey
                this.Continuation = new Canna.Prolog.Runtime.Builtins.TermComposition.arg_3(new Canna.Prolog.Runtime.Builtins.Meta.nonvar_1(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Arithmetic.is_2(new replace_key_variables_3(this.Continuation, this.Engine, varM, varOldKey, varNewKey), this.Engine, varM, new Canna.Prolog.Runtime.Objects.Structure("-", varN, new Canna.Prolog.Runtime.Objects.Integer(1))), this.Engine), this.Engine, varArg), this.Engine, varN, varNewKey, varArg);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause replace_key_variables(N,OldKey,NewKey) :- (arg(N,OldKey,OldVar) , (arg(N,NewKey,OldVar) , ((M is (N - 1)) , replace_key_variables(M,OldKey,NewKey)))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="replace_key_variables", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="replace_key_variables(N,OldKey,NewKey) :- (arg(N,OldKey,OldVar) , (arg(N,NewKey,O" +
            "ldVar) , ((M is (N - 1)) , replace_key_variables(M,OldKey,NewKey)))).")]
        private class replace_key_variables_3_3 : replace_key_variables_3 {
            
            public replace_key_variables_3_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable N
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varN, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable OldKey
                Canna.Prolog.Runtime.Objects.Var varOldKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varOldKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable NewKey
                Canna.Prolog.Runtime.Objects.Var varNewKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varNewKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var N
                // Don't need to declare var OldKey
                Canna.Prolog.Runtime.Objects.Var varOldVar = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var NewKey
                // Don't need to declare var OldVar
                Canna.Prolog.Runtime.Objects.Var varM = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var M
                // Don't need to declare var OldKey
                // Don't need to declare var NewKey
                this.Continuation = new Canna.Prolog.Runtime.Builtins.TermComposition.arg_3(new Canna.Prolog.Runtime.Builtins.TermComposition.arg_3(new Canna.Prolog.Runtime.Builtins.Arithmetic.is_2(new replace_key_variables_3(this.Continuation, this.Engine, varM, varOldKey, varNewKey), this.Engine, varM, new Canna.Prolog.Runtime.Objects.Structure("-", varN, new Canna.Prolog.Runtime.Objects.Integer(1))), this.Engine, varN, varNewKey, varOldVar), this.Engine, varN, varOldKey, varOldVar);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate concordant/subset/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=3, IsPublic=false)]
    internal class concordant_subset_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public concordant_subset_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new concordant_subset_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause concordant_subset([(Key - Val)|Rest],Clavis,Answer) :- (concordant_subset(Rest,Key,List,More) , concordant_subset(More,Key,[Val|List],Clavis,Answer)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="concordant_subset([(Key - Val)|Rest],Clavis,Answer) :- (concordant_subset(Rest,Ke" +
            "y,List,More) , concordant_subset(More,Key,[Val|List],Clavis,Answer)).")]
        private class concordant_subset_3_1 : concordant_subset_3 {
            
            public concordant_subset_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varVal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varRest = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("-", varKey, varVal), varRest);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Clavis
                Canna.Prolog.Runtime.Objects.Var varClavis = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varClavis, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Answer
                Canna.Prolog.Runtime.Objects.Var varAnswer = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varAnswer, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Rest
                // Don't need to declare var Key
                Canna.Prolog.Runtime.Objects.Var varList = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varMore = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var More
                // Don't need to declare var Key
                // Don't need to declare var Val
                // Don't need to declare var List
                // Don't need to declare var Clavis
                // Don't need to declare var Answer
                this.Continuation = new concordant_subset_4(new concordant_subset_5(this.Continuation, this.Engine, varMore, varKey, new Canna.Prolog.Runtime.Objects.PrologList(varVal, varList), varClavis, varAnswer), this.Engine, varRest, varKey, varList, varMore);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate concordant/subset/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=4, IsPublic=false)]
    internal class concordant_subset_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public concordant_subset_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new concordant_subset_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new concordant_subset_4_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause concordant_subset([(Key - Val)|Rest],Clavis,[Val|List],More) :- ((Key == Clavis) , ('!' , concordant_subset(Rest,Clavis,List,More))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="concordant_subset([(Key - Val)|Rest],Clavis,[Val|List],More) :- ((Key == Clavis) " +
            ", (\'!\' , concordant_subset(Rest,Clavis,List,More))).")]
        private class concordant_subset_4_1 : concordant_subset_4 {
            
            public concordant_subset_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varVal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varRest = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("-", varKey, varVal), varRest);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Clavis
                Canna.Prolog.Runtime.Objects.Var varClavis = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varClavis, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Val
                Canna.Prolog.Runtime.Objects.Var varList = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varVal, varList);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable More
                Canna.Prolog.Runtime.Objects.Var varMore = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varMore, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Key
                // Don't need to declare var Clavis
                // Don't need to declare var Rest
                // Don't need to declare var Clavis
                // Don't need to declare var List
                // Don't need to declare var More
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IdenticalTerm(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new concordant_subset_4(this.Continuation, this.Engine, varRest, varClavis, varList, varMore), this.Engine), this.Engine, varKey, varClavis);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause concordant_subset(More,_,[],More).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="concordant_subset(More,_,[],More).")]
        private class concordant_subset_4_2 : concordant_subset_4 {
            
            public concordant_subset_4_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable More
                Canna.Prolog.Runtime.Objects.Var varMore = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varMore, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable More
                // Don't need to declare var More
                if ((_arg4_deref.UnifyWithVar(varMore, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate concordant/subset/5
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=5, IsPublic=false)]
    internal class concordant_subset_5 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        private Term _arg5;
        
        public concordant_subset_5(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
            _arg5 = arg5;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new concordant_subset_5_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
yield return new concordant_subset_5_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
yield return new concordant_subset_5_3(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
        }
        
        #region Clause concordant_subset([],Key,Subset,Key,Subset) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="concordant_subset([],Key,Subset,Key,Subset) :- \'!\'.")]
        private class concordant_subset_5_1 : concordant_subset_5 {
            
            public concordant_subset_5_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Key
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Subset
                Canna.Prolog.Runtime.Objects.Var varSubset = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varSubset, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Key
                // Don't need to declare var Key
                if ((_arg4_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable Subset
                // Don't need to declare var Subset
                if ((_arg5_deref.UnifyWithVar(varSubset, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause concordant_subset(_,Key,Subset,Key,Subset).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="concordant_subset(_,Key,Subset,Key,Subset).")]
        private class concordant_subset_5_2 : concordant_subset_5 {
            
            public concordant_subset_5_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable _
                // Don't need to declare var _
                if ((_arg1_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Key
                Canna.Prolog.Runtime.Objects.Var varKey = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Subset
                Canna.Prolog.Runtime.Objects.Var varSubset = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varSubset, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Key
                // Don't need to declare var Key
                if ((_arg4_deref.UnifyWithVar(varKey, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable Subset
                // Don't need to declare var Subset
                if ((_arg5_deref.UnifyWithVar(varSubset, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause concordant_subset(More,_,_,Clavis,Answer) :- concordant_subset(More,Clavis,Answer).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="concordant_subset", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="concordant_subset(More,_,_,Clavis,Answer) :- concordant_subset(More,Clavis,Answer" +
            ").")]
        private class concordant_subset_5_3 : concordant_subset_5 {
            
            public concordant_subset_5_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable More
                Canna.Prolog.Runtime.Objects.Var varMore = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varMore, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable _
                // Don't need to declare var _
                if ((_arg3_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var2"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Clavis
                Canna.Prolog.Runtime.Objects.Var varClavis = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varClavis, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable Answer
                Canna.Prolog.Runtime.Objects.Var varAnswer = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg5_deref.UnifyWithVar(varAnswer, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var More
                // Don't need to declare var Clavis
                // Don't need to declare var Answer
                this.Continuation = new concordant_subset_3(this.Continuation, this.Engine, varMore, varClavis, varAnswer);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate free/variables/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=4, IsPublic=false)]
    internal class free_variables_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public free_variables_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new free_variables_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new free_variables_4_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new free_variables_4_3(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new free_variables_4_4(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause free_variables(Term,Bound,VarList,[Term|VarList]) :- (var(Term) , (term_is_free_of(Bound,Term) , (list_is_free_of(VarList,Term) , '!'))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="free_variables(Term,Bound,VarList,[Term|VarList]) :- (var(Term) , (term_is_free_o" +
            "f(Bound,Term) , (list_is_free_of(VarList,Term) , \'!\'))).")]
        private class free_variables_4_1 : free_variables_4 {
            
            public free_variables_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable VarList
                Canna.Prolog.Runtime.Objects.Var varVarList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varVarList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var Term
                // Don't need to declare var VarList
                Canna.Prolog.Runtime.Objects.PrologList _arg4Template = new Canna.Prolog.Runtime.Objects.PrologList(varTerm, varVarList);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term
                // Don't need to declare var Bound
                // Don't need to declare var Term
                // Don't need to declare var VarList
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Meta.var_1(new term_is_free_of_2(new list_is_free_of_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine), this.Engine, varVarList, varTerm), this.Engine, varBound, varTerm), this.Engine, varTerm);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause free_variables(Term,Bound,VarList,VarList) :- (var(Term) , '!').
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="free_variables(Term,Bound,VarList,VarList) :- (var(Term) , \'!\').")]
        private class free_variables_4_2 : free_variables_4 {
            
            public free_variables_4_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable VarList
                Canna.Prolog.Runtime.Objects.Var varVarList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varVarList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable VarList
                // Don't need to declare var VarList
                if ((_arg4_deref.UnifyWithVar(varVarList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Meta.var_1(new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine), this.Engine, varTerm);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause free_variables(Term,Bound,OldList,NewList) :- (explicit_binding(Term,Bound,NewTerm,NewBound) , ('!' , free_variables(NewTerm,NewBound,OldList,NewList))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="free_variables(Term,Bound,OldList,NewList) :- (explicit_binding(Term,Bound,NewTer" +
            "m,NewBound) , (\'!\' , free_variables(NewTerm,NewBound,OldList,NewList))).")]
        private class free_variables_4_3 : free_variables_4 {
            
            public free_variables_4_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable OldList
                Canna.Prolog.Runtime.Objects.Var varOldList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varOldList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable NewList
                Canna.Prolog.Runtime.Objects.Var varNewList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varNewList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term
                // Don't need to declare var Bound
                Canna.Prolog.Runtime.Objects.Var varNewTerm = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varNewBound = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var NewTerm
                // Don't need to declare var NewBound
                // Don't need to declare var OldList
                // Don't need to declare var NewList
                this.Continuation = new explicit_binding_4(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new free_variables_4(this.Continuation, this.Engine, varNewTerm, varNewBound, varOldList, varNewList), this.Engine), this.Engine, varTerm, varBound, varNewTerm, varNewBound);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause free_variables(Term,Bound,OldList,NewList) :- (functor(Term,_,N) , free_variables(N,Term,Bound,OldList,NewList)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="free_variables(Term,Bound,OldList,NewList) :- (functor(Term,_,N) , free_variables" +
            "(N,Term,Bound,OldList,NewList)).")]
        private class free_variables_4_4 : free_variables_4 {
            
            public free_variables_4_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable OldList
                Canna.Prolog.Runtime.Objects.Var varOldList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varOldList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable NewList
                Canna.Prolog.Runtime.Objects.Var varNewList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varNewList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var Term
                // Don't need to declare var Bound
                // Don't need to declare var OldList
                // Don't need to declare var NewList
                this.Continuation = new Canna.Prolog.Runtime.Builtins.TermComposition.functor_3(new free_variables_5(this.Continuation, this.Engine, varN, varTerm, varBound, varOldList, varNewList), this.Engine, varTerm, new Canna.Prolog.Runtime.Objects.Var("var1"), varN);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate free/variables/5
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=5, IsPublic=false)]
    internal class free_variables_5 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        private Term _arg5;
        
        public free_variables_5(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
            _arg5 = arg5;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new free_variables_5_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
yield return new free_variables_5_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4, _arg5);
        }
        
        #region Clause free_variables(0,Term,Bound,VarList,VarList) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="free_variables(0,Term,Bound,VarList,VarList) :- \'!\'.")]
        private class free_variables_5_1 : free_variables_5 {
            
            public free_variables_5_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with integer 0
                if ((_arg1_deref.UnifyWithInteger(new Canna.Prolog.Runtime.Objects.Integer(0), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable VarList
                Canna.Prolog.Runtime.Objects.Var varVarList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varVarList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable VarList
                // Don't need to declare var VarList
                if ((_arg5_deref.UnifyWithVar(varVarList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause free_variables(N,Term,Bound,OldList,NewList) :- (arg(N,Term,Argument) , (free_variables(Argument,Bound,OldList,MidList) , ((M is (N - 1)) , ('!' , free_variables(M,Term,Bound,MidList,NewList))))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="free_variables", Arity=5, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="free_variables(N,Term,Bound,OldList,NewList) :- (arg(N,Term,Argument) , (free_var" +
            "iables(Argument,Bound,OldList,MidList) , ((M is (N - 1)) , (\'!\' , free_variables" +
            "(M,Term,Bound,MidList,NewList))))).")]
        private class free_variables_5_2 : free_variables_5 {
            
            public free_variables_5_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4, Term arg5) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4, arg5) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable N
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varN, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable OldList
                Canna.Prolog.Runtime.Objects.Var varOldList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg4_deref.UnifyWithVar(varOldList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg5_deref = _arg5.Dereference();
                // Test if _arg5 unify with variable NewList
                Canna.Prolog.Runtime.Objects.Var varNewList = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg5_deref.UnifyWithVar(varNewList, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var N
                // Don't need to declare var Term
                Canna.Prolog.Runtime.Objects.Var varArgument = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Argument
                // Don't need to declare var Bound
                // Don't need to declare var OldList
                Canna.Prolog.Runtime.Objects.Var varMidList = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varM = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var M
                // Don't need to declare var Term
                // Don't need to declare var Bound
                // Don't need to declare var MidList
                // Don't need to declare var NewList
                this.Continuation = new Canna.Prolog.Runtime.Builtins.TermComposition.arg_3(new free_variables_4(new Canna.Prolog.Runtime.Builtins.Arithmetic.is_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new free_variables_5(this.Continuation, this.Engine, varM, varTerm, varBound, varMidList, varNewList), this.Engine), this.Engine, varM, new Canna.Prolog.Runtime.Objects.Structure("-", varN, new Canna.Prolog.Runtime.Objects.Integer(1))), this.Engine, varArgument, varBound, varOldList, varMidList), this.Engine, varN, varTerm, varArgument);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference(), _arg5.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate explicit/binding/4
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
    internal class explicit_binding_4 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        private Term _arg4;
        
        public explicit_binding_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
            _arg4 = arg4;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new explicit_binding_4_1(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new explicit_binding_4_2(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new explicit_binding_4_3(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new explicit_binding_4_4(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new explicit_binding_4_5(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new explicit_binding_4_6(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
yield return new explicit_binding_4_7(Continuation, Engine, _arg1, _arg2, _arg3, _arg4);
        }
        
        #region Clause explicit_binding(( \+ Goal),Bound,fail,Bound) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="explicit_binding(( \\+ Goal),Bound,fail,Bound) :- \'!\'.")]
        private class explicit_binding_4_1 : explicit_binding_4 {
            
            public explicit_binding_4_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("\\+", varGoal);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("fail");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Bound
                // Don't need to declare var Bound
                if ((_arg4_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause explicit_binding(not(Goal),Bound,fail,Bound) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="explicit_binding(not(Goal),Bound,fail,Bound) :- \'!\'.")]
        private class explicit_binding_4_2 : explicit_binding_4 {
            
            public explicit_binding_4_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("not", varGoal);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("fail");
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Test if _arg4 unify with variable Bound
                // Don't need to declare var Bound
                if ((_arg4_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause explicit_binding((Var ^ Goal),Bound,Goal,(Bound + Var)) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="explicit_binding((Var ^ Goal),Bound,Goal,(Bound + Var)) :- \'!\'.")]
        private class explicit_binding_4_3 : explicit_binding_4 {
            
            public explicit_binding_4_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("^", varVar, varGoal);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Goal
                // Don't need to declare var Goal
                if ((_arg3_deref.UnifyWithVar(varGoal, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var Bound
                // Don't need to declare var Var
                Canna.Prolog.Runtime.Objects.Structure _arg4Template = new Canna.Prolog.Runtime.Objects.Structure("+", varBound, varVar);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause explicit_binding(setof(Var,Goal,Set),Bound,(Goal - Set),(Bound + Var)) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="explicit_binding(setof(Var,Goal,Set),Bound,(Goal - Set),(Bound + Var)) :- \'!\'.")]
        private class explicit_binding_4_4 : explicit_binding_4 {
            
            public explicit_binding_4_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varSet = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("setof", varVar, varGoal, varSet);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Goal
                // Don't need to declare var Set
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("-", varGoal, varSet);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var Bound
                // Don't need to declare var Var
                Canna.Prolog.Runtime.Objects.Structure _arg4Template = new Canna.Prolog.Runtime.Objects.Structure("+", varBound, varVar);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause explicit_binding(bagof(Var,Goal,Bag),Bound,(Goal - Bag),(Bound + Var)) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="explicit_binding(bagof(Var,Goal,Bag),Bound,(Goal - Bag),(Bound + Var)) :- \'!\'.")]
        private class explicit_binding_4_5 : explicit_binding_4 {
            
            public explicit_binding_4_5(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varBag = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("bagof", varVar, varGoal, varBag);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Goal
                // Don't need to declare var Bag
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("-", varGoal, varBag);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var Bound
                // Don't need to declare var Var
                Canna.Prolog.Runtime.Objects.Structure _arg4Template = new Canna.Prolog.Runtime.Objects.Structure("+", varBound, varVar);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause explicit_binding(set_of(Var,Goal,Set),Bound,(Goal - Set),(Bound + Var)) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="explicit_binding(set_of(Var,Goal,Set),Bound,(Goal - Set),(Bound + Var)) :- \'!\'.")]
        private class explicit_binding_4_6 : explicit_binding_4 {
            
            public explicit_binding_4_6(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varSet = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("set_of", varVar, varGoal, varSet);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Goal
                // Don't need to declare var Set
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("-", varGoal, varSet);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var Bound
                // Don't need to declare var Var
                Canna.Prolog.Runtime.Objects.Structure _arg4Template = new Canna.Prolog.Runtime.Objects.Structure("+", varBound, varVar);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause explicit_binding(bag_of(Var,Goal,Bag),Bound,(Goal - Bag),(Bound + Var)) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="explicit_binding", Arity=4, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="explicit_binding(bag_of(Var,Goal,Bag),Bound,(Goal - Bag),(Bound + Var)) :- \'!\'.")]
        private class explicit_binding_4_7 : explicit_binding_4 {
            
            public explicit_binding_4_7(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3, Term arg4) : 
                    base(continuation, engine, arg1, arg2, arg3, arg4) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varGoal = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varBag = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("bag_of", varVar, varGoal, varBag);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Bound
                Canna.Prolog.Runtime.Objects.Var varBound = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varBound, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Don't need to declare var Goal
                // Don't need to declare var Bag
                Canna.Prolog.Runtime.Objects.Structure _arg3Template = new Canna.Prolog.Runtime.Objects.Structure("-", varGoal, varBag);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg4_deref = _arg4.Dereference();
                // Don't need to declare var Bound
                // Don't need to declare var Var
                Canna.Prolog.Runtime.Objects.Structure _arg4Template = new Canna.Prolog.Runtime.Objects.Structure("+", varBound, varVar);
                if ((_arg4_deref.UnifyWithStructure(_arg4Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference(), _arg4.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate term/is/free/of/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="term_is_free_of", Arity=2, IsPublic=false)]
    internal class term_is_free_of_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public term_is_free_of_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new term_is_free_of_2_1(Continuation, Engine, _arg1, _arg2);
yield return new term_is_free_of_2_2(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause term_is_free_of(Term,Var) :- (var(Term) , ('!' , (Term \== Var))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="term_is_free_of", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="term_is_free_of(Term,Var) :- (var(Term) , (\'!\' , (Term \\== Var))).")]
        private class term_is_free_of_2_1 : term_is_free_of_2 {
            
            public term_is_free_of_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Var
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varVar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term
                // Don't need to declare var Term
                // Don't need to declare var Var
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Meta.var_1(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.NotIdenticalTerm(this.Continuation, this.Engine, varTerm, varVar), this.Engine), this.Engine, varTerm);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause term_is_free_of(Term,Var) :- (functor(Term,_,N) , term_is_free_of(N,Term,Var)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="term_is_free_of", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="term_is_free_of(Term,Var) :- (functor(Term,_,N) , term_is_free_of(N,Term,Var)).")]
        private class term_is_free_of_2_2 : term_is_free_of_2 {
            
            public term_is_free_of_2_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Var
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varVar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term
                // Don't need to declare var _
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var Term
                // Don't need to declare var Var
                this.Continuation = new Canna.Prolog.Runtime.Builtins.TermComposition.functor_3(new term_is_free_of_3(this.Continuation, this.Engine, varN, varTerm, varVar), this.Engine, varTerm, new Canna.Prolog.Runtime.Objects.Var("var1"), varN);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate term/is/free/of/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="term_is_free_of", Arity=3, IsPublic=false)]
    internal class term_is_free_of_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public term_is_free_of_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new term_is_free_of_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new term_is_free_of_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause term_is_free_of(0,Term,Var) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="term_is_free_of", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="term_is_free_of(0,Term,Var) :- \'!\'.")]
        private class term_is_free_of_3_1 : term_is_free_of_3 {
            
            public term_is_free_of_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with integer 0
                if ((_arg1_deref.UnifyWithInteger(new Canna.Prolog.Runtime.Objects.Integer(0), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Var
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varVar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause term_is_free_of(N,Term,Var) :- (arg(N,Term,Argument) , (term_is_free_of(Argument,Var) , ((M is (N - 1)) , ('!' , term_is_free_of(M,Term,Var))))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="term_is_free_of", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="term_is_free_of(N,Term,Var) :- (arg(N,Term,Argument) , (term_is_free_of(Argument," +
            "Var) , ((M is (N - 1)) , (\'!\' , term_is_free_of(M,Term,Var))))).")]
        private class term_is_free_of_3_2 : term_is_free_of_3 {
            
            public term_is_free_of_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable N
                Canna.Prolog.Runtime.Objects.Var varN = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varN, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Var
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varVar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var N
                // Don't need to declare var Term
                Canna.Prolog.Runtime.Objects.Var varArgument = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Argument
                // Don't need to declare var Var
                Canna.Prolog.Runtime.Objects.Var varM = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var N
                // Don't need to declare var M
                // Don't need to declare var Term
                // Don't need to declare var Var
                this.Continuation = new Canna.Prolog.Runtime.Builtins.TermComposition.arg_3(new term_is_free_of_2(new Canna.Prolog.Runtime.Builtins.Arithmetic.is_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new term_is_free_of_3(this.Continuation, this.Engine, varM, varTerm, varVar), this.Engine), this.Engine, varM, new Canna.Prolog.Runtime.Objects.Structure("-", varN, new Canna.Prolog.Runtime.Objects.Integer(1))), this.Engine, varArgument, varVar), this.Engine, varN, varTerm, varArgument);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate list/is/free/of/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_is_free_of", Arity=2, IsPublic=false)]
    internal class list_is_free_of_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public list_is_free_of_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new list_is_free_of_2_1(Continuation, Engine, _arg1, _arg2);
yield return new list_is_free_of_2_2(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause list_is_free_of([Head|Tail],Var) :- ((Head \== Var) , ('!' , list_is_free_of(Tail,Var))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_is_free_of", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_is_free_of([Head|Tail],Var) :- ((Head \\== Var) , (\'!\' , list_is_free_of(Tail" +
            ",Var))).")]
        private class list_is_free_of_2_1 : list_is_free_of_2 {
            
            public list_is_free_of_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varHead = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varHead, varTail);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Var
                Canna.Prolog.Runtime.Objects.Var varVar = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varVar, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Head
                // Don't need to declare var Var
                // Don't need to declare var Tail
                // Don't need to declare var Var
                this.Continuation = new Canna.Prolog.Runtime.Builtins.NotIdenticalTerm(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new list_is_free_of_2(this.Continuation, this.Engine, varTail, varVar), this.Engine), this.Engine, varHead, varVar);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause list_is_free_of([],_).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="list_is_free_of", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="list_is_free_of([],_).")]
        private class list_is_free_of_2_2 : list_is_free_of_2 {
            
            public list_is_free_of_2_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable _
                // Don't need to declare var _
                if ((_arg2_deref.UnifyWithVar(new Canna.Prolog.Runtime.Objects.Var("var1"), this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate ->/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="->", Arity=2, IsPublic=true)]
    public class dashgreaterthan_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public dashgreaterthan_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new dashgreaterthan_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause (If -> Then) :- (If , ('!' , Then)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="->", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="(If -> Then) :- (If , (\'!\' , Then)).")]
        private class dashgreaterthan_2_1 : dashgreaterthan_2 {
            
            public dashgreaterthan_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable If
                Canna.Prolog.Runtime.Objects.Var varIf = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varIf, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Then
                Canna.Prolog.Runtime.Objects.Var varThen = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varThen, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var If
                // Don't need to declare var Then
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.call_1(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varThen), this.Engine), this.Engine, varIf);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate ;/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name=";", Arity=2, IsPublic=true)]
    public class semicolon_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public semicolon_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new semicolon_2_1(Continuation, Engine, _arg1, _arg2);
yield return new semicolon_2_2(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause ((If -> Then) ; Else) :- ('!' , ((If -> Then) ; Else)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name=";", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="((If -> Then) ; Else) :- (\'!\' , ((If -> Then) ; Else)).")]
        private class semicolon_2_1 : semicolon_2 {
            
            public semicolon_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varIf = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varThen = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("->", varIf, varThen);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Else
                Canna.Prolog.Runtime.Objects.Var varElse = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varElse, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var If
                // Don't need to declare var Then
                // Don't need to declare var Else
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Control.IfThenElse(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varIf), new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varThen), new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varElse)), this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause (A ; B) :- (A ; B).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name=";", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="(A ; B) :- (A ; B).")]
        private class semicolon_2_2 : semicolon_2 {
            
            public semicolon_2_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable A
                Canna.Prolog.Runtime.Objects.Var varA = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varA, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable B
                Canna.Prolog.Runtime.Objects.Var varB = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varB, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var A
                // Don't need to declare var B
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varA), new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varB));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate ,/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name=",", Arity=2, IsPublic=true)]
    public class comma_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public comma_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new comma_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause (Goal1 , Goal2) :- (Goal1 , Goal2).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name=",", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="(Goal1 , Goal2) :- (Goal1 , Goal2).")]
        private class comma_2_1 : comma_2 {
            
            public comma_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Goal1
                Canna.Prolog.Runtime.Objects.Var varGoal1 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varGoal1, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Goal2
                Canna.Prolog.Runtime.Objects.Var varGoal2 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varGoal2, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Goal1
                // Don't need to declare var Goal2
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.call_1(new Canna.Prolog.Runtime.Builtins.Control.call_1(this.Continuation, this.Engine, varGoal2), this.Engine, varGoal1);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate op/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="op", Arity=3, IsPublic=true)]
    public class op_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public op_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new op_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new op_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new op_3_3(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause op(Prec,Spec,[]) :- '!'.
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="op", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="op(Prec,Spec,[]) :- \'!\'.")]
        private class op_3_1 : op_3 {
            
            public op_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Prec
                Canna.Prolog.Runtime.Objects.Var varPrec = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varPrec, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Spec
                Canna.Prolog.Runtime.Objects.Var varSpec = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varSpec, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause op(Prec,Spec,[Op|T]) :- ('!' , (makeop(Prec,Spec,Op) , op(Prec,Spec,T))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="op", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="op(Prec,Spec,[Op|T]) :- (\'!\' , (makeop(Prec,Spec,Op) , op(Prec,Spec,T))).")]
        private class op_3_2 : op_3 {
            
            public op_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Prec
                Canna.Prolog.Runtime.Objects.Var varPrec = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varPrec, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Spec
                Canna.Prolog.Runtime.Objects.Var varSpec = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varSpec, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                Canna.Prolog.Runtime.Objects.Var varOp = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varT = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg3Template = new Canna.Prolog.Runtime.Objects.PrologList(varOp, varT);
                if ((_arg3_deref.UnifyWithStructure(_arg3Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Prec
                // Don't need to declare var Spec
                // Don't need to declare var Op
                // Don't need to declare var Prec
                // Don't need to declare var Spec
                // Don't need to declare var T
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Directives.makeop_3(new op_3(this.Continuation, this.Engine, varPrec, varSpec, varT), this.Engine, varPrec, varSpec, varOp), this.Engine);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause op(Prec,Spec,Op) :- makeop(Prec,Spec,Op).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="op", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="op(Prec,Spec,Op) :- makeop(Prec,Spec,Op).")]
        private class op_3_3 : op_3 {
            
            public op_3_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Prec
                Canna.Prolog.Runtime.Objects.Var varPrec = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varPrec, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Spec
                Canna.Prolog.Runtime.Objects.Var varSpec = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varSpec, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Op
                Canna.Prolog.Runtime.Objects.Var varOp = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varOp, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Prec
                // Don't need to declare var Spec
                // Don't need to declare var Op
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Directives.makeop_3(this.Continuation, this.Engine, varPrec, varSpec, varOp);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate compare/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=3, IsPublic=false)]
    internal class compare_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public compare_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new compare_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new compare_3_2(Continuation, Engine, _arg1, _arg2, _arg3);
yield return new compare_3_3(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause compare(<,Term1,Term2) :- ((Term1 @< Term2) , '!').
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="compare(<,Term1,Term2) :- ((Term1 @< Term2) , \'!\').")]
        private class compare_3_1 : compare_3 {
            
            public compare_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("<");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term1
                Canna.Prolog.Runtime.Objects.Var varTerm1 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm1, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Term2
                Canna.Prolog.Runtime.Objects.Var varTerm2 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varTerm2, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term1
                // Don't need to declare var Term2
                this.Continuation = new Canna.Prolog.Runtime.Builtins.LessThanTerm(new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine), this.Engine, varTerm1, varTerm2);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause compare(>,Term1,Term2) :- ((Term1 @> Term2) , '!').
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="compare(>,Term1,Term2) :- ((Term1 @> Term2) , \'!\').")]
        private class compare_3_2 : compare_3 {
            
            public compare_3_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure(">");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term1
                Canna.Prolog.Runtime.Objects.Var varTerm1 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm1, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Term2
                Canna.Prolog.Runtime.Objects.Var varTerm2 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varTerm2, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Term1
                // Don't need to declare var Term2
                this.Continuation = new Canna.Prolog.Runtime.Builtins.GreaterThanTerm(new Canna.Prolog.Runtime.Builtins.Control.cut_0(this.Continuation, this.Engine), this.Engine, varTerm1, varTerm2);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause compare(=,Term1,Term2).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="compare", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="compare(=,Term1,Term2).")]
        private class compare_3_3 : compare_3 {
            
            public compare_3_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("=");
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term1
                Canna.Prolog.Runtime.Objects.Var varTerm1 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm1, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Term2
                Canna.Prolog.Runtime.Objects.Var varTerm2 = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varTerm2, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate open/3
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="open", Arity=3, IsPublic=true)]
    public class open_3 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public open_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
            _arg3 = arg3;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new open_3_1(Continuation, Engine, _arg1, _arg2, _arg3);
        }
        
        #region Clause open(Src,Stream,Mode) :- open(Src,Stream,Mode,[]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="open", Arity=3, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="open(Src,Stream,Mode) :- open(Src,Stream,Mode,[]).")]
        private class open_3_1 : open_3 {
            
            public open_3_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2, Term arg3) : 
                    base(continuation, engine, arg1, arg2, arg3) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Src
                Canna.Prolog.Runtime.Objects.Var varSrc = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varSrc, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Stream
                Canna.Prolog.Runtime.Objects.Var varStream = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varStream, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg3_deref = _arg3.Dereference();
                // Test if _arg3 unify with variable Mode
                Canna.Prolog.Runtime.Objects.Var varMode = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg3_deref.UnifyWithVar(varMode, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Src
                // Don't need to declare var Stream
                // Don't need to declare var Mode
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.open_4(this.Continuation, this.Engine, varSrc, varStream, varMode, new Canna.Prolog.Runtime.Objects.PrologList());
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference(), _arg3.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate close/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="close", Arity=1, IsPublic=true)]
    public class close_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public close_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new close_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause close(S_or_a) :- close(S_or_a,[]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="close", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="close(S_or_a) :- close(S_or_a,[]).")]
        private class close_1_1 : close_1 {
            
            public close_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable S_or_a
                Canna.Prolog.Runtime.Objects.Var varS_or_a = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varS_or_a, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var S_or_a
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.close_2(this.Continuation, this.Engine, varS_or_a, new Canna.Prolog.Runtime.Objects.PrologList());
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate flush/output/0
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="flush_output", Arity=0, IsPublic=true)]
    public class flush_output_0 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        public flush_output_0(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine) : 
                base(continuation, engine) {
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new flush_output_0_1(Continuation, Engine);
        }
        
        #region Clause flush_output :- (current_output(S) , flush_output(S)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="flush_output", Arity=0, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="flush_output :- (current_output(S) , flush_output(S)).")]
        private class flush_output_0_1 : flush_output_0 {
            
            public flush_output_0_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine) : 
                    base(continuation, engine) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call);
                }
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var S
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.current_output_1(new Canna.Prolog.Runtime.Builtins.IO.flush_output_1(this.Continuation, this.Engine, varS), this.Engine, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit);
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate at/end/of/stream/0
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="at_end_of_stream", Arity=0, IsPublic=true)]
    public class at_end_of_stream_0 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        public at_end_of_stream_0(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine) : 
                base(continuation, engine) {
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new at_end_of_stream_0_1(Continuation, Engine);
        }
        
        #region Clause at_end_of_stream :- (current_input(S) , (stream_property(S,end_of_stream(E)) , ('!' , ((E = at) ; (E = past))))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="at_end_of_stream", Arity=0, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="at_end_of_stream :- (current_input(S) , (stream_property(S,end_of_stream(E)) , (\'" +
            "!\' , ((E = at) ; (E = past))))).")]
        private class at_end_of_stream_0_1 : at_end_of_stream_0 {
            
            public at_end_of_stream_0_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine) : 
                    base(continuation, engine) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call);
                }
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var S
                Canna.Prolog.Runtime.Objects.Var varE = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var E
                // Don't need to declare var E
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.current_input_1(new Canna.Prolog.Runtime.Builtins.IO.stream_property_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("at")), new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("past"))), this.Engine), this.Engine, varS, new Canna.Prolog.Runtime.Objects.Structure("end_of_stream", varE)), this.Engine, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit);
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate at/end/of/stream/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="at_end_of_stream", Arity=1, IsPublic=true)]
    public class at_end_of_stream_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public at_end_of_stream_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new at_end_of_stream_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause at_end_of_stream(S_or_a) :- (((atom((S_or - a)) -> stream_property(S,alias(S_or_a))) ; (S = S_or_a)) , (stream_property(S,end_of_stream(E)) , ('!' , ((E = at) ; (E = past))))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="at_end_of_stream", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="at_end_of_stream(S_or_a) :- (((atom((S_or - a)) -> stream_property(S,alias(S_or_a" +
            "))) ; (S = S_or_a)) , (stream_property(S,end_of_stream(E)) , (\'!\' , ((E = at) ; " +
            "(E = past))))).")]
        private class at_end_of_stream_1_1 : at_end_of_stream_1 {
            
            public at_end_of_stream_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable S_or_a
                Canna.Prolog.Runtime.Objects.Var varS_or_a = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varS_or_a, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varS_or = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var S_or_a
                // Don't need to declare var S
                // Don't need to declare var S_or_a
                // Don't need to declare var S
                Canna.Prolog.Runtime.Objects.Var varE = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var E
                // Don't need to declare var E
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.IfThenElse(new Canna.Prolog.Runtime.Builtins.IO.stream_property_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("at")), new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("past"))), this.Engine), this.Engine, varS, new Canna.Prolog.Runtime.Objects.Structure("end_of_stream", varE)), this.Engine, new Canna.Prolog.Runtime.Builtins.Meta.atom_1(new Canna.Prolog.Runtime.Builtins.IO.stream_property_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("at")), new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("past"))), this.Engine), this.Engine, varS, new Canna.Prolog.Runtime.Objects.Structure("end_of_stream", varE)), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("-", varS_or, new Canna.Prolog.Runtime.Objects.Structure("a"))), new Canna.Prolog.Runtime.Builtins.IO.stream_property_2(new Canna.Prolog.Runtime.Builtins.IO.stream_property_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("at")), new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("past"))), this.Engine), this.Engine, varS, new Canna.Prolog.Runtime.Objects.Structure("end_of_stream", varE)), this.Engine, varS, new Canna.Prolog.Runtime.Objects.Structure("alias", varS_or_a)), new Canna.Prolog.Runtime.Builtins.Unification.unify_2(new Canna.Prolog.Runtime.Builtins.IO.stream_property_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.Control.Disjunction(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("at")), new Canna.Prolog.Runtime.Builtins.Unification.unify_2(this.Continuation, this.Engine, varE, new Canna.Prolog.Runtime.Objects.Structure("past"))), this.Engine), this.Engine, varS, new Canna.Prolog.Runtime.Objects.Structure("end_of_stream", varE)), this.Engine, varS, varS_or_a));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate write/term/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write_term", Arity=2, IsPublic=true)]
    public class write_term_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public write_term_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new write_term_2_1(Continuation, Engine, _arg1, _arg2);
yield return new write_term_2_2(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause write_term(Term,Options) :- (current_output(S) , write_term(S,Term,Options)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write_term", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="write_term(Term,Options) :- (current_output(S) , write_term(S,Term,Options)).")]
        private class write_term_2_1 : write_term_2 {
            
            public write_term_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Options
                Canna.Prolog.Runtime.Objects.Var varOptions = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varOptions, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var S
                // Don't need to declare var Term
                // Don't need to declare var Options
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.current_output_1(new Canna.Prolog.Runtime.Builtins.ReadWrite.write_term_3(this.Continuation, this.Engine, varS, varTerm, varOptions), this.Engine, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause write_term(S,Term) :- write_term(S,Term,[numbervars(true)]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write_term", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="write_term(S,Term) :- write_term(S,Term,[numbervars(true)]).")]
        private class write_term_2_2 : write_term_2 {
            
            public write_term_2_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable S
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varS, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var S
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.ReadWrite.write_term_3(this.Continuation, this.Engine, varS, varTerm, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("numbervars", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList()));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate write/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write", Arity=1, IsPublic=true)]
    public class write_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public write_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new write_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause write(Term) :- (current_output(S) , write_term(S,Term,[numbervars(true)])).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="write(Term) :- (current_output(S) , write_term(S,Term,[numbervars(true)])).")]
        private class write_1_1 : write_1 {
            
            public write_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var S
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.current_output_1(new Canna.Prolog.Runtime.Builtins.ReadWrite.write_term_3(this.Continuation, this.Engine, varS, varTerm, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("numbervars", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList())), this.Engine, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate writeq/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="writeq", Arity=1, IsPublic=false)]
    internal class writeq_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public writeq_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new writeq_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause writeq(Term) :- (current_output(S) , write_term(S,Term,[quoted(true), numbervars(true)])).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="writeq", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="writeq(Term) :- (current_output(S) , write_term(S,Term,[quoted(true), numbervars(" +
            "true)])).")]
        private class writeq_1_1 : writeq_1 {
            
            public writeq_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var S
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.current_output_1(new Canna.Prolog.Runtime.Builtins.ReadWrite.write_term_3(this.Continuation, this.Engine, varS, varTerm, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("quoted", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("numbervars", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList()))), this.Engine, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate writeq/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="writeq", Arity=2, IsPublic=true)]
    public class writeq_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public writeq_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new writeq_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause writeq(S,Term) :- write_term(S,Term,[quoted(true), numbervars(true)]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="writeq", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="writeq(S,Term) :- write_term(S,Term,[quoted(true), numbervars(true)]).")]
        private class writeq_2_1 : writeq_2 {
            
            public writeq_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable S
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varS, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var S
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.ReadWrite.write_term_3(this.Continuation, this.Engine, varS, varTerm, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("quoted", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("numbervars", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList())));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate write/canonical/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write_canonical", Arity=1, IsPublic=true)]
    public class write_canonical_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public write_canonical_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new write_canonical_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause write_canonical(Term) :- (current_output(S) , write_term(S,Term,[quoted(true), ignore_ops(true)])).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write_canonical", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="write_canonical(Term) :- (current_output(S) , write_term(S,Term,[quoted(true), ig" +
            "nore_ops(true)])).")]
        private class write_canonical_1_1 : write_canonical_1 {
            
            public write_canonical_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var S
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.IO.current_output_1(new Canna.Prolog.Runtime.Builtins.ReadWrite.write_term_3(this.Continuation, this.Engine, varS, varTerm, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("quoted", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("ignore_ops", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList()))), this.Engine, varS);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate write/canonical/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write_canonical", Arity=2, IsPublic=true)]
    public class write_canonical_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public write_canonical_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new write_canonical_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause write_canonical(S,Term) :- write_term(S,Term,[quoted(true), ignore_ops(true)]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="write_canonical", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="write_canonical(S,Term) :- write_term(S,Term,[quoted(true), ignore_ops(true)]).")]
        private class write_canonical_2_1 : write_canonical_2 {
            
            public write_canonical_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable S
                Canna.Prolog.Runtime.Objects.Var varS = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varS, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Term
                Canna.Prolog.Runtime.Objects.Var varTerm = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varTerm, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var S
                // Don't need to declare var Term
                this.Continuation = new Canna.Prolog.Runtime.Builtins.ReadWrite.write_term_3(this.Continuation, this.Engine, varS, varTerm, new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("quoted", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList(new Canna.Prolog.Runtime.Objects.Structure("ignore_ops", new Canna.Prolog.Runtime.Objects.Structure("true")), new Canna.Prolog.Runtime.Objects.PrologList())));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate help/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="help", Arity=1, IsPublic=true)]
    public class help_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public help_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new help_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause help(PI) :- ('$help'(PI,Help) , showhelp(Help)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="help", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="help(PI) :- (\'$help\'(PI,Help) , showhelp(Help)).")]
        private class help_1_1 : help_1 {
            
            public help_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable PI
                Canna.Prolog.Runtime.Objects.Var varPI = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varPI, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var PI
                Canna.Prolog.Runtime.Objects.Var varHelp = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Help
                this.Continuation = new Canna.Prolog.Runtime.Builtins.Control.call_1(new showhelp_1(this.Continuation, this.Engine, varHelp), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("$help", varPI, varHelp));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate showhelp/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="showhelp", Arity=1, IsPublic=false)]
    internal class showhelp_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public showhelp_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new showhelp_1_1(Continuation, Engine, _arg1);
        }
        
        #region Clause showhelp(help((Functor / Arity),Args,Desc)) :- (print_template(Functor,Args) , (nl , (print_desc(Desc) , nl))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="showhelp", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="showhelp(help((Functor / Arity),Args,Desc)) :- (print_template(Functor,Args) , (n" +
            "l , (print_desc(Desc) , nl))).")]
        private class showhelp_1_1 : showhelp_1 {
            
            public showhelp_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varFunctor = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varArity = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varArgs = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varDesc = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("help", new Canna.Prolog.Runtime.Objects.Structure("/", varFunctor, varArity), varArgs, varDesc);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Functor
                // Don't need to declare var Args
                // Don't need to declare var Desc
                this.Continuation = new print_template_2(new Canna.Prolog.Runtime.Builtins.IO.nl_0(new print_desc_1(new Canna.Prolog.Runtime.Builtins.IO.nl_0(this.Continuation, this.Engine), this.Engine, varDesc), this.Engine), this.Engine, varFunctor, varArgs);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate print/desc/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_desc", Arity=1, IsPublic=false)]
    internal class print_desc_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public print_desc_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new print_desc_1_1(Continuation, Engine, _arg1);
yield return new print_desc_1_2(Continuation, Engine, _arg1);
yield return new print_desc_1_3(Continuation, Engine, _arg1);
        }
        
        #region Clause print_desc(Desc) :- (member(longdesc(D),Desc) , ('!' , print(D))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_desc", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_desc(Desc) :- (member(longdesc(D),Desc) , (\'!\' , print(D))).")]
        private class print_desc_1_1 : print_desc_1 {
            
            public print_desc_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Desc
                Canna.Prolog.Runtime.Objects.Var varDesc = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varDesc, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varD = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Desc
                // Don't need to declare var D
                this.Continuation = new member_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, varD), this.Engine), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("longdesc", varD), varDesc);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause print_desc(Desc) :- (member(desc(D),Desc) , ('!' , print(D))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_desc", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_desc(Desc) :- (member(desc(D),Desc) , (\'!\' , print(D))).")]
        private class print_desc_1_2 : print_desc_1 {
            
            public print_desc_1_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Desc
                Canna.Prolog.Runtime.Objects.Var varDesc = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varDesc, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Var varD = new Canna.Prolog.Runtime.Objects.Var();
                // Don't need to declare var Desc
                // Don't need to declare var D
                this.Continuation = new member_2(new Canna.Prolog.Runtime.Builtins.Control.cut_0(new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, varD), this.Engine), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("desc", varD), varDesc);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause print_desc(Desc) :- print('No info available').
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_desc", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_desc(Desc) :- print(\'No info available\').")]
        private class print_desc_1_3 : print_desc_1 {
            
            public print_desc_1_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Desc
                Canna.Prolog.Runtime.Objects.Var varDesc = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varDesc, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                this.Continuation = new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.Structure("No info available"));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate print/template/2
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_template", Arity=2, IsPublic=false)]
    internal class print_template_2 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public print_template_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                base(continuation, engine) {
            _arg1 = arg1;
            _arg2 = arg2;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new print_template_2_1(Continuation, Engine, _arg1, _arg2);
        }
        
        #region Clause print_template(Functor,Args) :- (print(Functor) , (print('(') , (print_args(Args) , print(')')))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_template", Arity=2, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_template(Functor,Args) :- (print(Functor) , (print(\'(\') , (print_args(Args)" +
            " , print(\')\')))).")]
        private class print_template_2_1 : print_template_2 {
            
            public print_template_2_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1, Term arg2) : 
                    base(continuation, engine, arg1, arg2) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference(), _arg2.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable Functor
                Canna.Prolog.Runtime.Objects.Var varFunctor = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varFunctor, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                Canna.Prolog.Runtime.Objects.Term _arg2_deref = _arg2.Dereference();
                // Test if _arg2 unify with variable Args
                Canna.Prolog.Runtime.Objects.Var varArgs = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg2_deref.UnifyWithVar(varArgs, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Functor
                // Don't need to declare var Args
                this.Continuation = new Canna.Prolog.Runtime.Builtins.print_1(new Canna.Prolog.Runtime.Builtins.print_1(new print_args_1(new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, new Canna.Prolog.Runtime.Objects.Structure(")")), this.Engine, varArgs), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("(")), this.Engine, varFunctor);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference(), _arg2.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate print/args/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_args", Arity=1, IsPublic=false)]
    internal class print_args_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public print_args_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new print_args_1_1(Continuation, Engine, _arg1);
yield return new print_args_1_2(Continuation, Engine, _arg1);
yield return new print_args_1_3(Continuation, Engine, _arg1);
        }
        
        #region Clause print_args([]).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_args", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_args([]).")]
        private class print_args_1_1 : print_args_1 {
            
            public print_args_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList();
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause print_args([LastArg]) :- print_arg(LastArg).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_args", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_args([LastArg]) :- print_arg(LastArg).")]
        private class print_args_1_2 : print_args_1 {
            
            public print_args_1_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varLastArg = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varLastArg, new Canna.Prolog.Runtime.Objects.PrologList());
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var LastArg
                this.Continuation = new print_arg_1(this.Continuation, this.Engine, varLastArg);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause print_args([Arg|Tail]) :- (print_arg(Arg) , (print(,) , print_args(Tail))).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_args", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_args([Arg|Tail]) :- (print_arg(Arg) , (print(,) , print_args(Tail))).")]
        private class print_args_1_3 : print_args_1 {
            
            public print_args_1_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varArg = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Var varTail = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.PrologList _arg1Template = new Canna.Prolog.Runtime.Objects.PrologList(varArg, varTail);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Arg
                // Don't need to declare var Tail
                this.Continuation = new print_arg_1(new Canna.Prolog.Runtime.Builtins.print_1(new print_args_1(this.Continuation, this.Engine, varTail), this.Engine, new Canna.Prolog.Runtime.Objects.Structure(",")), this.Engine, varArg);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate print/arg/1
    [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_arg", Arity=1, IsPublic=false)]
    internal class print_arg_1 : Canna.Prolog.Runtime.Objects.MultiClausePredicate {
        
        private Term _arg1;
        
        public print_arg_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                base(continuation, engine) {
            _arg1 = arg1;
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new print_arg_1_1(Continuation, Engine, _arg1);
yield return new print_arg_1_2(Continuation, Engine, _arg1);
yield return new print_arg_1_3(Continuation, Engine, _arg1);
yield return new print_arg_1_4(Continuation, Engine, _arg1);
        }
        
        #region Clause print_arg('In'(Arg)) :- (print(+) , print(Arg)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_arg", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_arg(\'In\'(Arg)) :- (print(+) , print(Arg)).")]
        private class print_arg_1_1 : print_arg_1 {
            
            public print_arg_1_1(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varArg = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("In", varArg);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Arg
                this.Continuation = new Canna.Prolog.Runtime.Builtins.print_1(new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, varArg), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("+"));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause print_arg('Out'(Arg)) :- (print(-) , print(Arg)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_arg", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_arg(\'Out\'(Arg)) :- (print(-) , print(Arg)).")]
        private class print_arg_1_2 : print_arg_1 {
            
            public print_arg_1_2(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varArg = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("Out", varArg);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Arg
                this.Continuation = new Canna.Prolog.Runtime.Builtins.print_1(new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, varArg), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("-"));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause print_arg('Both'(Arg)) :- (print('?') , print(Arg)).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_arg", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_arg(\'Both\'(Arg)) :- (print(\'?\') , print(Arg)).")]
        private class print_arg_1_3 : print_arg_1 {
            
            public print_arg_1_3(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                Canna.Prolog.Runtime.Objects.Var varArg = new Canna.Prolog.Runtime.Objects.Var();
                Canna.Prolog.Runtime.Objects.Structure _arg1Template = new Canna.Prolog.Runtime.Objects.Structure("Both", varArg);
                if ((_arg1_deref.UnifyWithStructure(_arg1Template, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var Arg
                this.Continuation = new Canna.Prolog.Runtime.Builtins.print_1(new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, varArg), this.Engine, new Canna.Prolog.Runtime.Objects.Structure("?"));
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
        
        #region Clause print_arg(X) :- print(X).
        [Canna.Prolog.Runtime.Objects.PrologPredicateAttribute(Name="print_arg", Arity=1, IsPublic=false)]
        [Canna.Prolog.Runtime.Objects.PrologClauseAttribute(ClauseStatement="print_arg(X) :- print(X).")]
        private class print_arg_1_4 : print_arg_1 {
            
            public print_arg_1_4(Canna.Prolog.Runtime.Objects.IPredicate continuation, Canna.Prolog.Runtime.Objects.IEngine engine, Term arg1) : 
                    base(continuation, engine, arg1) {
            }
            
            public override PredicateResult Call() {
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Call, _arg1.Dereference());
                }
                Canna.Prolog.Runtime.Objects.Term _arg1_deref = _arg1.Dereference();
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var();
                if ((_arg1_deref.UnifyWithVar(varX, this.Engine.BoundedVariables, false) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                this.Continuation = new Canna.Prolog.Runtime.Builtins.print_1(this.Continuation, this.Engine, varX);
                if (Canna.Prolog.Runtime.Objects.BasePredicate._predicateSwitch.Enabled) {
                    this.TraceEvent(Canna.Prolog.Runtime.Objects.TraceEventType.Exit, _arg1.Dereference());
                }
                return this.Success();
            }
        }
        #endregion
    }
    #endregion
}
