//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Users {
    using Canna.Prolog.Common;
    using System.Collections.Generic;
    
    
    #region Predicate a/2
    public class a_2 : Canna.Prolog.Common.BasePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public a_2(Term arg1, Term arg2, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new a_2_1(_arg1,_arg2,continuation);
yield return new a_2_2(_arg1,_arg2,continuation);
        }
        
        #region Clause a(X,Y) :- b(X), c(Y).
        public class a_2_1 : a_2 {
            
            public a_2_1(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                Canna.Prolog.Common.Var var1 = new Canna.Prolog.Common.Var("X");
                if (_arg1.unifyVar(var1, boundedVars)) {
                    Canna.Prolog.Common.Var var2 = new Canna.Prolog.Common.Var("Y");
                    if (_arg2.unifyVar(var2, boundedVars)) {
                        this.continuation = new b_1(var1, new c_1(var2, this.continuation));
                        return this.continuation.call();
                    }
                }
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
        
        #region Clause a(X,Y) :- d(X), c(Y).
        public class a_2_2 : a_2 {
            
            public a_2_2(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                Canna.Prolog.Common.Var var1 = new Canna.Prolog.Common.Var("X");
                if (_arg1.unifyVar(var1, boundedVars)) {
                    Canna.Prolog.Common.Var var2 = new Canna.Prolog.Common.Var("Y");
                    if (_arg2.unifyVar(var2, boundedVars)) {
                        this.continuation = new d_1(var1, new c_1(var2, this.continuation));
                        return this.continuation.call();
                    }
                }
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate b/1
    public class b_1 : Canna.Prolog.Common.BasePredicate {
        
        private Term _arg1;
        
        public b_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new b_1_1(_arg1,continuation);
yield return new b_1_2(_arg1,continuation);
        }
        
        #region Clause b(1).
        public class b_1_1 : b_1 {
            
            public b_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                if (_arg1.unifyInteger(new Canna.Prolog.Common.Integer(1), boundedVars)) {
                    return Canna.Prolog.Common.PredicateResult.Success;
                }
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
        }
        #endregion
        
        #region Clause b(2,2).
        public class b_1_2 : b_1 {
            
            public b_1_2(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                if (_arg1.unifyFloating(new Canna.Prolog.Common.Floating(2.2), boundedVars)) {
                    return Canna.Prolog.Common.PredicateResult.Success;
                }
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate c/1
    public class c_1 : Canna.Prolog.Common.BasePredicate {
        
        private Term _arg1;
        
        public c_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new c_1_1(_arg1,continuation);
yield return new c_1_2(_arg1,continuation);
        }
        
        #region Clause c(3).
        public class c_1_1 : c_1 {
            
            public c_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                if (_arg1.unifyInteger(new Canna.Prolog.Common.Integer(3), boundedVars)) {
                    return Canna.Prolog.Common.PredicateResult.Success;
                }
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
        }
        #endregion
        
        #region Clause c(4,2).
        public class c_1_2 : c_1 {
            
            public c_1_2(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                if (_arg1.unifyFloating(new Canna.Prolog.Common.Floating(4.2), boundedVars)) {
                    return Canna.Prolog.Common.PredicateResult.Success;
                }
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate d/1
    public class d_1 : Canna.Prolog.Common.BasePredicate {
        
        private Term _arg1;
        
        public d_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new d_1_1(_arg1,continuation);
        }
        
        #region Clause d(5).
        public class d_1_1 : d_1 {
            
            public d_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                if (_arg1.unifyInteger(new Canna.Prolog.Common.Integer(5), boundedVars)) {
                    return Canna.Prolog.Common.PredicateResult.Success;
                }
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Common.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
}
