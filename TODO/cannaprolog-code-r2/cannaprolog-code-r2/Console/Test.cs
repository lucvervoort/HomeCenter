//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Users {
    using Canna.Prolog.Runtime.Objects;
    using System.Collections.Generic;
    
    
    #region Predicate test/3
    public class test_3 : Canna.Prolog.Runtime.Objects.BasePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        private Term _arg3;
        
        public test_3(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
            _arg3 = arg3.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new test_3_1(_arg1,_arg2,_arg3,continuation);
        }
        
        #region Clause test(X,Y,Z) :- cippa(X), !, cippa(Y), lippa(Z).
        public class test_3_1 : test_3 {
            
            public test_3_1(Term arg1, Term arg2, Term arg3, IPredicate continuation) : 
                    base(arg1, arg2, arg3, continuation) {
            }
            
            public override PredicateResult call() {
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                if ((this._arg1.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg2 unify with variable Y
                Canna.Prolog.Runtime.Objects.Var varY = new Canna.Prolog.Runtime.Objects.Var("Y");
                if ((this._arg2.unifyVar(varY, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg3 unify with variable Z
                Canna.Prolog.Runtime.Objects.Var varZ = new Canna.Prolog.Runtime.Objects.Var("Z");
                if ((this._arg3.unifyVar(varZ, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                // Don't need to declare var Y
                // Don't need to declare var Z
                this.continuation = new cippa_1(varX, new Canna.Prolog.Runtime.Builtins.cut_0(new cippa_1(varY, new lippa_1(varZ, this.continuation))));
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate test/2
    public class test_2 : Canna.Prolog.Runtime.Objects.BasePredicate {
        
        private Term _arg1;
        
        private Term _arg2;
        
        public test_2(Term arg1, Term arg2, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
            _arg2 = arg2.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new test_2_1(_arg1,_arg2,continuation);
        }
        
        #region Clause test(X,X) :- lippa(X).
        public class test_2_1 : test_2 {
            
            public test_2_1(Term arg1, Term arg2, IPredicate continuation) : 
                    base(arg1, arg2, continuation) {
            }
            
            public override PredicateResult call() {
                // Test if _arg1 unify with variable X
                Canna.Prolog.Runtime.Objects.Var varX = new Canna.Prolog.Runtime.Objects.Var("X");
                if ((this._arg1.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Test if _arg2 unify with variable X
                // Don't need to declare var X
                if ((this._arg2.unifyVar(varX, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                // Don't need to declare var X
                this.continuation = new lippa_1(varX, this.continuation);
                return this.continuation.call();
            }
            
            public override PredicateResult redo() {
                return continuation.redo();
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate cippa/1
    public class cippa_1 : Canna.Prolog.Runtime.Objects.BasePredicate {
        
        private Term _arg1;
        
        public cippa_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new cippa_1_1(_arg1,continuation);
yield return new cippa_1_2(_arg1,continuation);
        }
        
        #region Clause cippa(1).
        public class cippa_1_1 : cippa_1 {
            
            public cippa_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                // Test if _arg1 unify with integer 1
                if ((this._arg1.unifyInteger(new Canna.Prolog.Runtime.Objects.Integer(1), boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
        
        #region Clause cippa(2).
        public class cippa_1_2 : cippa_1 {
            
            public cippa_1_2(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                // Test if _arg1 unify with integer 2
                if ((this._arg1.unifyInteger(new Canna.Prolog.Runtime.Objects.Integer(2), boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
    
    #region Predicate lippa/1
    public class lippa_1 : Canna.Prolog.Runtime.Objects.BasePredicate {
        
        private Term _arg1;
        
        public lippa_1(Term arg1, IPredicate continuation) : 
                base(continuation) {
            _arg1 = arg1.dereference();
        }
        
        protected override IEnumerator<IPredicate> getClauses() {
yield return new lippa_1_1(_arg1,continuation);
yield return new lippa_1_2(_arg1,continuation);
        }
        
        #region Clause lippa(a).
        public class lippa_1_1 : lippa_1 {
            
            public lippa_1_1(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                Canna.Prolog.Runtime.Objects.Functor _arg1Template = new Canna.Prolog.Runtime.Objects.Functor("a");
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
        
        #region Clause lippa(b).
        public class lippa_1_2 : lippa_1 {
            
            public lippa_1_2(Term arg1, IPredicate continuation) : 
                    base(arg1, continuation) {
            }
            
            public override PredicateResult call() {
                Canna.Prolog.Runtime.Objects.Functor _arg1Template = new Canna.Prolog.Runtime.Objects.Functor("b");
                if ((this._arg1.unifyFunctor(_arg1Template, boundedVars) == false)) {
                    return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
                }
                return Canna.Prolog.Runtime.Objects.PredicateResult.Success;
            }
            
            public override PredicateResult redo() {
                return Canna.Prolog.Runtime.Objects.PredicateResult.Failed;
            }
        }
        #endregion
    }
    #endregion
}
