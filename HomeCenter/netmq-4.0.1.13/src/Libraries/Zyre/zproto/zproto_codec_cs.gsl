.template 0
#   zproto_codec_cs.gsl
#
#   Generates a codec for a protocol specification. 
include "zproto_lib.gsl"
include "zproto_lib_cs.gsl"
resolve_includes ()
expand_headers ()
set_cs_defaults ()
ignorecase = 0
.endtemplate
.output "$(class.source_dir)/$(class.name:Pascal).cs"
//  =========================================================================
//    $(class.name:pascal) - $(class.title:)
//
//    Codec class for $(class.name:pascal).
//
//    ** WARNING *************************************************************
//    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
//    your changes at the next build cycle. This is great for temporary printf
//    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
//    for commits are:
//
//     * The XML model used for this code generation: $(filename), or
//     * The code generation script that built this file: $(script)
//    ************************************************************************
.   for class.license
//    $(string.trim (license.):block                                         )
.   endfor
//    =========================================================================

using System;
using System.Collections.Generic;
using System.Text;
using NetMQ;
using NetMQ.Sockets;
using NetMQ.zmq;

namespace $(class.namespace)
{
	/// <summary>
	/// $(class.title:)
	/// </summary>
.if class.modifier <> ""
	$(class.modifier) class $(class.name:Pascal)
.else
	class $(class.name:Pascal)
.endif
	{
		public class MessageException : Exception
		{
			public MessageException(string message) : base(message)
			{
			}
		}

		public enum MessageId
		{
.for message
			$(message.name) = $(id),
.endfor
		}
		
.for message
		#region $(message.name)

		public class $(message.name)Message
		{
.    for field where type = "octets"
			public const int $(field.name)Size = $(size);

.    endfor
			public $(message.name)Message()
			{
.    for field where type = "octets"
				$(field.name) = new byte[$(field.name)Size];
.    endfor
			}			

.   for field
.      if type = "number"
			/// <summary>
			/// Get/Set the $(name) field
			/// </summary>
			public $(cstype) $(name)
			{
				get;set;
			}

.      elsif type = "octets"
			/// <summary>
			/// Get/Set the $(name) field
			/// </summary>
			public byte[] $(name) 
			{
				get; private set;
			}

.      elsif type = "string"
			/// <summary>
			/// Get/Set the $(name) field
			/// </summary>
			public string $(name)
			{
				get;set;
			}

.      elsif type = "longstr"
			/// <summary>
			/// Get/Set the $(name) field
			/// </summary>
			public string $(name)
			{
				get;set;
			}

.      elsif type = "strings"
			/// <summary>
			/// /// Get/Set the $(name) list
			/// </summary>
			public List<string> $(name)
			{
				get;set;
			}

.      elsif type = "hash"
			/// <summary>
			/// Get/Set the $(name) dictionary
			/// </summary>
			public Dictionary<string, string> $(name)
			{
				get;set;
			}

.      elsif type = "uuid"
			/// <summary>
			/// Get/Set the $(name) field
			/// </summary>
			public Guid $(name) 
			{
				get;set;
			}

.      elsif type = "msg"
			/// <summary>
			/// /// Get/Set the $(name) NetMQMessage
			/// </summary>
			public NetMQMessage $(name) 
			{
				get;set;
			}

.      elsif type = "chunk" 
			/// <summary>
			/// Get/Set the $(name) field
			/// </summary>
			public byte[] $(name) 
			{
				get;set;
			}

.      elsif type = "frame" 
			/// <summary>
			/// Get/Set the $(name) frame
			/// </summary>
			public byte[] $(name) 
			{
				get;set;
			}

.      endif
.   endfor

			internal int GetFrameSize()
			{
				int frameSize = 0;

.   for field
				//  $(name)
.       if type = "number"
				frameSize += $(size);    
.       elsif type = "octets"
				frameSize += $(size);
.       elsif type = "string"
.           if defined (field.value)
				frameSize += 1 +  "$(value:)".Length;
.           else
				frameSize += 1 + $(name).Length;
.           endif
.       elsif type = "longstr"
				frameSize += 4;
				if ($(name) != null)
					frameSize += $(name).Length;
.       elsif type = "strings"
				frameSize += 4;            //  Size is 4 octets
				if ($(name) != null) 
				{
					foreach(string s in $(name))
					{
						frameSize += 4 + s.Length;
					}                
				}
.       elsif type = "hash"
				frameSize += 4;            //  Size is 4 octets
				if ($(name) != null) 
				{                
					int $(var_name)Size = 0;

					foreach (var pair in $(name))
					{
						$(var_name)Size += 1 + pair.Key.Length;
						$(var_name)Size += 4 + pair.Value.Length;
					}

					frameSize += $(var_name)Size;
				}
            
.       elsif type = "chunk"
				frameSize += 4;            //  Size is 4 octets
				if ($(name) != null)
					frameSize += $(name).Length;
.       elsif type = "uuid"
				frameSize  += 16;
.       elsif type = "frame"
.       elsif type = "msg"
.           class.msg = name
.           if item () <> count (message.field)
.               echo "E: in $(message.name:), $(field.name) must come last"
.           endif
.       endif

.   endfor
				return frameSize;
			}		

			internal void Write($(class.name:Pascal) m)
			{
.   for field
				// $(name)
.       if type = "number"
.           if defined (field.value)
				m.PutNumber$(size)($(value:)); // $(name)
.           else
				m.PutNumber$(size)($(name));
.           endif
.       elsif type = "octets"
				m.PutOctets($(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
				m.PutString("$(value:)");
.           else
				m.PutString($(name));
.           endif
.       elsif type = "longstr"
				if ($(name) != null) 						
					m.PutLongString($(name));                						
				else
					m.PutNumber4(0);    //  Empty string
.       elsif type = "strings"
				if ($(name) != null) 
				{
					m.PutNumber4((UInt32)$(name).Count);

					foreach (string s in $(name))
					{
						m.PutLongString(s);
					}                
				}
				else
					m.PutNumber4(0);    //  Empty string array
.       elsif type = "hash"
				if ($(name) != null) 
				{
					m.PutNumber4((UInt32)$(name).Count);
               
					foreach(var pair in $(name))
					{
						m.PutString(pair.Key);
						m.PutLongString(pair.Value);
					}				
				}
				else
					m.PutNumber4(0);    //  Empty dictionary
.       elsif type = "chunk"
				if ($(name) != null)
				{
					m.PutNumber4((UInt32)$(name).Length);
					m.PutOctets($(name), $(name).Length);				
				}
				else
					m.PutNumber4(0);    //  Empty chunk
.       elsif type = "uuid" 
				// copy guid           
				m.PutOctets($(name).ToByteArray(), 16);			
.       endif

.   endfor
			}

			internal void Read($(class.name:Pascal) m)
			{
				int listSize;
				int hashSize;
				int chunkSize;
				byte[] guidBytes;
.   for field where defined (value)
				$(cstype) $(var_name);
.   endfor

.   for field
				// $(name)
.       if type = "number"
.           if defined (field.value)
				$(var_name) = m.GetNumber$(size)();                
				if ($(var_name) != $(value:)) 
				{
					throw new MessageException("$(name) is invalid");						
				}													
.           else
				$(name) = m.GetNumber$(size)();
.           endif
.       elsif type = "octets"
				m.GetOctets($(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
				{
					string $(name:camel) = m.GetString();                
					if ($(name:camel) != "$(value:)") 
					{
						throw new MessageException("$(name) is invalid");
					}
				}
.           else
				$(name) = m.GetString();
.           endif
.       elsif type = "longstr"
				$(name) = m.GetLongString();            
.       elsif type = "strings"
				listSize = (int)m.GetNumber4();                
				$(name) = new List<string>(listSize);                
				while (listSize-- > 0) 
				{
					string s = m.GetLongString();
					$(name).Add(s);                   
				}												
.       elsif type = "hash"
				hashSize = (int)m.GetNumber4();                
				$(name) = new Dictionary<string, string>();                
				while (hashSize-- > 0)  
				{
					string key = m.GetString();
					string value = m.GetLongString();
					$(name).Add(key, value);
				}						
.       elsif type = "chunk"
				chunkSize = (int)m.GetNumber4();                
				if (m.m_offset + chunkSize > m.m_buffer.Length) 
				{
					throw new MessageException("$(name) is missing data");
				}
                
				$(name) = new byte[chunkSize];
				m.GetOctets($(name), chunkSize);                						
.       elsif type = "uuid"
				if (m.m_offset + 16 > m.m_buffer.Length) 
				{
					throw new MessageException("$(name) is invalid");					
				}
            
				guidBytes = new byte[16];
				m.GetOctets(guidBytes, 16);
				$(name) = new Guid(guidBytes);            						
.       endif

.   endfor
			}
		}

		#endregion

.endfor

		private byte[] m_buffer;    //  Read/write buffer for serialization    
		private int m_offset;
		private byte[] m_routingId;

		/// <summary>
		/// Create a new $(class.name:pascal)
		/// </summary>
		public $(class.name:Pascal)()
		{    
.for message
			$(message.name) = new $(message.name)Message();
.endfor
		}			

.for message
		public $(message.name)Message $(message.name) {get;private set;}

.endfor
	
		/// <summary>
		/// Get/set the message RoutingId.
		/// </summary>
		public byte[] RoutingId
		{
			get
			{
				return m_routingId;
			}
			set 
			{
				if (value == null)
			        m_routingId = null;
			    else
			    {       
					if (m_routingId == null || m_routingId.Length != value.Length)
						m_routingId = new byte[value.Length];

					Buffer.BlockCopy(value, 0, m_routingId, 0, value.Length);
				}
			}
		}

		/// <summary>
		/// Get/Set the $(class.name:Pascal) id
		/// </summary>
		public MessageId Id 
		{
			get;set;
		}

		/// <summary>
		/// Return a printable command string
		/// </summary>
		public string Command
		{
			get
			{	    
				switch (Id) 
				{
.for class.message
					case MessageId.$(message.name):
						return "$(message.name)";										
.endfor
				}
				return "?";
			}
		}
			
		/// <summary>
		/// Receive a $(class.name:pascal) from the socket.  
		/// </summary>
		public void Receive(IReceivingSocket input)
		{	    
			bool more;     		
			   
			if (input is RouterSocket) 
			{   			
				Msg routingIdMsg = new Msg();
				routingIdMsg.InitEmpty();

				try
				{
					input.Receive(ref routingIdMsg);

					if (!routingIdMsg.HasMore) 
					{
						throw new MessageException("No routing id");				
					}

					if (m_routingId == null || m_routingId.Length == routingIdMsg.Size)					
						m_routingId = new byte[routingIdMsg.Size];					

					Buffer.BlockCopy(routingIdMsg.Data, 0, m_routingId, 0, m_routingId.Length);
				}
				finally
				{
					routingIdMsg.Close();
				}
			}
			else
			{
				RoutingId = null;
			}

			Msg msg = new Msg();
			msg.InitEmpty();

			try
			{
				input.Receive(ref msg);

				m_offset = 0;
				m_buffer = msg.Data;
				more = msg.HasMore;
        
				UInt16 signature = GetNumber2();
    
				if (signature != (0xAAA0 | $(class.signature))) 
				{
					throw new MessageException("Invalid signature");			
				}
		
				//  Get message id and parse per message type
				Id = (MessageId)GetNumber1();
				
				switch (Id) 
				{
.for class.message
					case MessageId.$(message.name):
						$(message.name).Read(this);
					break;
.endfor
				default:
					throw new MessageException("Bad message id");            					
				}        
			}
			finally
			{
				m_buffer = null;
				msg.Close();		
			}
		}

		/// <summary>
		/// Send the $(class.name:pascal) to the socket.
		/// </summary>
		public void Send(IOutgoingSocket output)
		{    
			if (output is RouterSocket)
				output.SendMoreFrame(RoutingId);

			int frameSize = 2 + 1;          //  Signature and message ID
			switch (Id) 
			{
.for class.message where count (field)
				case MessageId.$(message.name):
					frameSize += $(message.name).GetFrameSize();
					break;
.endfor
			}

			//  Now serialize message into the buffer    
			Msg msg = new Msg();
			msg.InitPool(frameSize);

			try
			{		
				m_offset = 0;
				m_buffer = msg.Data;

				// put signature
				PutNumber2(0xAAA0 | $(class.signature));

				// put message id
				PutNumber1((byte)Id);
	
				switch (Id) 
				{
.for class.message where count (field)
					case MessageId.$(message.name):
						$(message.name).Write(this);
					break;
.endfor
				}

				//  Send the data frame				
				output.Send(ref msg, false);       
			}
			finally
			{
				m_buffer = null;
				msg.Close();
			}
		}	

		#region Network data encoding methods

		//  Put a block of octets to the frame
		private void PutOctets(byte[] host, int size) 
		{ 
			Buffer.BlockCopy(host, 0, m_buffer, m_offset, size);   
			m_offset += size; 
		}

		//  Get a block of octets from the frame
		private void GetOctets(byte[] host, int size) 
		{
			if (m_offset + size > m_buffer.Length) 
			{ 
				throw new MessageException("Malformed message");            			
			} 
			
			Buffer.BlockCopy(m_buffer, m_offset, host, 0, size);
			m_offset += size; 			
		}

		//  Put a 1-byte number to the frame
		private void PutNumber1(byte host) 
		{ 
			m_buffer[m_offset] = host;
			m_offset++;
		}

		//  Put a 2-byte number to the frame
		private void PutNumber2(UInt16 host) 
		{ 
			m_buffer[m_offset] = (byte) (((host) >> 8)  & 255);
			m_buffer[m_offset+1] = (byte) (((host))       & 255); 

			m_offset+=2;
		}

		//  Put a 4-byte number to the frame
		private void PutNumber4(UInt32 host) 
		{
			m_buffer[m_offset] = (byte) (((host) >> 24) & 255);
			m_buffer[m_offset+1] = (byte) (((host) >> 16) & 255); 
			m_buffer[m_offset+2] = (byte) (((host) >> 8)  & 255); 
			m_buffer[m_offset+3] = (byte) (((host))       & 255);

			m_offset+=4;
		}

		//  Put a 8-byte number to the frame
		private void PutNumber8(UInt64 host) 
		{
			m_buffer[m_offset] = (byte) (((host) >> 56) & 255);
			m_buffer[m_offset+1] = (byte) (((host) >> 48) & 255);
			m_buffer[m_offset+2] = (byte) (((host) >> 40) & 255);
			m_buffer[m_offset+3] = (byte) (((host) >> 32) & 255);
			m_buffer[m_offset+4] = (byte) (((host) >> 24) & 255); 
			m_buffer[m_offset+5] = (byte) (((host) >> 16) & 255);
			m_buffer[m_offset+6] = (byte) (((host) >> 8)  & 255);
			m_buffer[m_offset+7] = (byte) (((host))       & 255);

			m_offset+=8;
		}

		//  Get a 1-byte number from the frame
		private byte GetNumber1() 
		{
			if (m_offset + 1 > m_buffer.Length) 
			{
				throw new MessageException("Malformed message.");
			} 
    
			byte b = m_buffer[m_offset];
		
			m_offset++;

			return b;
		}

		//  Get a 2-byte number from the frame
		private UInt16 GetNumber2() 
		{ 
			if (m_offset + 2 > m_buffer.Length) 
			{
				throw new MessageException("Malformed message.");
			} 
    
			UInt16 number = (UInt16)((m_buffer[m_offset] << 8) + 
							m_buffer[m_offset+1]);
		
			m_offset+=2;

			return number;
		}

		//  Get a 4-byte number from the frame
		private UInt32 GetNumber4() 
		{ 
			if (m_offset + 4 > m_buffer.Length) 
			{
				throw new MessageException("Malformed message.");
			} 
    
			UInt32 number = 
				(((UInt32)m_buffer[m_offset]) << 24) + 
				(((UInt32)m_buffer[m_offset+1]) << 16)  +
				(((UInt32)m_buffer[m_offset+2]) << 8) +
				(UInt32)m_buffer[m_offset+3];
		
			m_offset+=4;

			return number;
		}

		//  Get a 8byte number from the frame
		private UInt64 GetNumber8() 
		{ 
			if (m_offset + 8 > m_buffer.Length) 
			{
				throw new MessageException("Malformed message.");
			} 
    
			UInt64 number = 
				(((UInt64) m_buffer[m_offset]) << 56) + 
				(((UInt64) m_buffer[m_offset+1]) << 48)  +
				(((UInt64) m_buffer[m_offset+2]) << 40) +
				(((UInt64) m_buffer[m_offset+3]) << 32) +
				(((UInt64) m_buffer[m_offset+4]) << 24) +
				(((UInt64) m_buffer[m_offset+5]) << 16) +
				(((UInt64) m_buffer[m_offset+6]) << 8) +		
				(UInt64) m_buffer[m_offset+7];
		
			m_offset+=8;

			return number;
		}

		//  Put a string to the frame
		private void PutString(string host) 
		{   
			int length = Encoding.UTF8.GetByteCount(host); 
			
			if (length > 255)
				length = 255;
		
			PutNumber1((byte)length); 

			Encoding.UTF8.GetBytes(host, 0, length, m_buffer, m_offset);
    
			m_offset += length;
		}

		//  Get a string from the frame
		private string GetString() 
		{ 
			int length = GetNumber1();    
			if (m_offset + length > m_buffer.Length) 
			{ 
			  throw new MessageException("Malformed message.");
			} 

			string s = Encoding.UTF8.GetString(m_buffer, m_offset, length);

			m_offset += length;

			return s;
		}

		//  Put a long string to the frame
		private void PutLongString(string host) 
		{     
			PutNumber4((UInt32)Encoding.UTF8.GetByteCount(host));
	 
			Encoding.UTF8.GetBytes(host, 0, host.Length, m_buffer, m_offset);
    
			m_offset += host.Length;
		}

		//  Get a long string from the frame
		private string GetLongString() 
		{ 
			int length = (int)GetNumber4();    
			if (m_offset + length > m_buffer.Length) 
			{ 
			  throw new MessageException("Malformed message.");
			} 

			string s = Encoding.UTF8.GetString(m_buffer, m_offset, length);

			m_offset += length;

			return s;
		}

		#endregion
	}
}
.output "$(class.test_dir)/$(class.name:Pascal)Tests.cs"
using System;
using System.Text;
using System.Collections.Generic;
using NUnit.Framework;
using NetMQ;
using NetMQ.Sockets;
.if class.namespace <> class.test_namespace
using $(class.namespace);
.endif

namespace $(class.test_namespace)
{
	[TestFixture]
	public class $(class.name:Pascal)Tests
	{
		private void FillArray(byte[] array, byte value)
		{
			for	(int i = 0; i < array.Length; i++)
			{
				array[i] = value;
			}
		}
.for class.message
	
		[Test]
		public void $(message.name:Pascal)Test()
		{
			Action<$(class.name:Pascal)> setMessage = m => 
			{
				m.Id = $(class.name:Pascal).MessageId.$(message.name:Pascal);

.   for field where !defined (value)
.       if type = "number"
				m.$(message.name).$(name) = 123;
.       elsif type = "octets"
				FillArray(m.$(message.name).$(name), 123);				    
.       elsif type = "string" | type = "longstr"
    			m.$(message.name).$(name) = "Life is short but Now lasts for ever";
.       elsif type = "strings"
				m.$(message.name).$(name) = new List<string>();
				m.$(message.name).$(name).Add("Name: Brutus");
				m.$(message.name).$(name).Add("Age: 43");    
.       elsif type = "hash"
				m.$(message.name).$(name) = new Dictionary<string,string>();
				m.$(message.name).$(name).Add("Name", "Brutus");
				m.$(message.name).$(name).Add("Age", "43");    
.       elsif type = "uuid"
				m.$(message.name).$(name) = Guid.Parse("DED9D22A-FCE1-488B-8761-84752ACC113E");
.       elsif type = "chunk"
				m.$(message.name).$(name) = Encoding.ASCII.GetBytes("Captcha Diem");
.       endif
.   endfor
			};

			Action<$(class.name:Pascal)> checkMessage = m=> 
			{
				Assert.That(m.Id, Is.EqualTo($(class.name:Pascal).MessageId.$(message.name:Pascal)));
.   for field where !defined (value)
.       if type = "number"
				Assert.That(m.$(message.name).$(name), Is.EqualTo(123));        
.       elsif type = "octets"
				Assert.That(m.$(message.name).$(name)[0], Is.EqualTo(123));        
				Assert.That(m.$(message.name).$(name)[m.$(message.name).$(name).Length-1], Is.EqualTo(123));                
.       elsif type = "string" | type = "longstr"
				Assert.That(m.$(message.name).$(name), Is.EqualTo("Life is short but Now lasts for ever"));                
.       elsif type = "strings"
				Assert.That(m.$(message.name).$(name).Count, Is.EqualTo(2));
				Assert.That(m.$(message.name).$(name)[0], Is.EqualTo("Name: Brutus"));                
				Assert.That(m.$(message.name).$(name)[1], Is.EqualTo("Age: 43"));                                
.       elsif type = "hash"
				Assert.That(m.$(message.name).$(name).Count, Is.EqualTo(2));
				Assert.That(m.$(message.name).$(name)["Name"], Is.EqualTo("Brutus"));                
				Assert.That(m.$(message.name).$(name)["Age"], Is.EqualTo("43"));                                
.       elsif type = "chunk"
				Assert.That(m.$(message.name).$(name), Is.EqualTo(Encoding.ASCII.GetBytes("Captcha Diem")));				
.       elsif type = "msg"
				Assert.That(m.$(message.name).$(name).FrameCount, Is.EqualTo(1));        
.       elsif type = "uuid"
				Assert.That(m.$(message.name).$(name), Is.EqualTo(Guid.Parse("DED9D22A-FCE1-488B-8761-84752ACC113E")));
.       endif
.   endfor
			};

			using (var client = new DealerSocket())
			using (var server = new RouterSocket())
			{
				server.Bind("inproc://zprototest");
				client.Connect("inproc://zprototest");

				$(class.name:Pascal) clientMessage = new $(class.name:Pascal)();
				$(class.name:Pascal) serverMessage = new $(class.name:Pascal)();

				for (int i=0; i < 2; i++)
				{
					// client send message to server
					setMessage(clientMessage);				
					clientMessage.Send(client);				
												
					// server receive the message
					serverMessage.Receive(server);
				
					// check that message received ok
					Assert.That(serverMessage.RoutingId, Is.Not.Null);					
					checkMessage(serverMessage);

					// reply to client, no need to set the message, using client data
					serverMessage.Send(server);

					// client receive the message
					clientMessage.Receive(client);
				
					// check that message received ok
					Assert.That(clientMessage.RoutingId, Is.Null);					
					checkMessage(clientMessage);
				}				
			}			
		}	
.endfor
	}
}